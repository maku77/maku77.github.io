<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vim on 天才まくまくノート</title><link>https://maku77.github.io/vim/</link><description>Recent content in Vim on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 06 Dec 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim で正規表現にマッチする行を削除する</title><link>https://maku77.github.io/p/ngf6w24/</link><pubDate>Thu, 06 Dec 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ngf6w24/</guid><description>正規表現に一致するテキストが見つかった行をすべて削除する 下記のように実行すると、正規表現に一致するテキストを含む行をまとめて削除することができます。
:g/正規表現/d 例えば、以下のようなファイルリストが書かれたテキストから、バックアップファイル（~ で終わる行）を削除するには、
src/main.h src/main.h~ src/main.cpp src/main.cpp~ 以下のようなコマンドを入力します。
:g/\~$/d 正規表現に一致するテキストが「見つからない」行をすべて削除する 逆に、指定した正規表現に一致するテキストが 見つからない 行を削除するには、下記のように実行します。
:v/正規表現/d</description></item><item><title>Vim の文字の削除方法まとめ (d, delete)</title><link>https://maku77.github.io/p/qbmdoef/</link><pubDate>Wed, 21 Dec 2011 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/qbmdoef/</guid><description>ノーマルモード時 入力 説明 dd 現在行を削除 D 行末までを削除（C なら行末まで削除して入力モードに） diw カーソル位置の単語を削除（単語の後ろのスペースも削除） daw カーソル位置の単語を削除（単語の後ろのスペースは残す） ciw カーソル位置の単語を削除して入力モードへ（単語の後ろのスペースも削除） caw カーソル位置の単語を削除して入力モードへ（単語の後ろのスペースは残す） 入力モード時 入力 説明 C-w カーソル位置から直前の単語までを削除 C-u カーソル位置から行頭までを削除 応用例: パターンに一致する「行全体」を削除する あるパターンに一致する文字列を含む 行全体 を削除したい場合は、行範囲と組み合わせて d (delete) コマンドを使用します。 置換コマンドの s コマンドと同様に、最初に行範囲の指定を行います。
:行範囲 d 行範囲を指定しない場合は、カレント行のみが対象になります。 つまり、:d というコマンドは、dd と同様にカレント行のみを削除します。
入力 説明 :d カレント行を削除 :% d すべての行を削除 :1,10 d 1〜10 行目を削除 :g/temp/ d temp を含む行を削除 :g/^#/ d # で始まる行を削除 :g/^$/ d 空行をすべて削除</description></item><item><title>Vim のアンドゥ操作とリドゥ操作</title><link>https://maku77.github.io/p/rihibef/</link><pubDate>Thu, 13 Nov 2008 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/rihibef/</guid><description>アンドゥ／リドゥの操作方法 Vim でアンドゥ (Undo) 操作、リドゥ (Redo) 操作を行うには、下記のコマンドを使用します。
u &amp;hellip; アンドゥ Ctrl-r &amp;hellip; リドゥ（アンドゥによって取り消された操作を復旧） アンドゥ回数の設定 アンドゥ操作のレベル（制限回数）を変更するには undolevels オプションを設定します。
:set undolevels=300 Linux や Windows では、undolevels の規定値は 1000 なので、通常は変更する必要はないでしょう。</description></item><item><title>Vim のビジュアルモードの基本</title><link>https://maku77.github.io/p/iumn4xs/</link><pubDate>Tue, 15 Jan 2008 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/iumn4xs/</guid><description>ビジュアルモードの開始・終了 ビジュアルモードは、Vim においてテキストの範囲選択を行うためのモードです。 ノーマルモードで下記のようなコマンドを入力することでビジュアルモードに入ることができます。
入力 説明 v ビジュアルモード（文字単位） V ビジュアルラインモード（行単位） Ctrl-v ビジュアルブロックモード（矩形） ビジュアルモードを抜けてノーマルモードに戻るには、Esc を押すか、何かコマンドを実行します（d で削除するなど）。 コマンドを実行した場合は、選択した範囲に対してコマンドが適用されます。
ビジュアルモードの選択範囲を拡張する カーソル移動で拡張する ビジュアルモードに入った後で o を入力することで、カーソル位置を選択領域の先頭、末尾へ交互に移動することができます。 この状態でカーソルを動かすと、選択領域を自在に伸縮させることができます。
ルールに応じて拡張する ビジュアルモードに入った後で、下記のような操作を行うと、ルールに従って選択範囲を拡張することができます。
入力 説明 ip カーソル位置の段落全体を選択 ap カーソル位置の段落全体を選択（後続の空行も含めて選択） iw カーソル位置の単語全体を選択 aw カーソル位置の単語全体を選択（後続のスペースも含めて選択） i( 括弧 () に囲まれた領域を選択 a( 括弧 () に囲まれた領域を選択（括弧も含めて選択） i{ 括弧 {} に囲まれた領域を選択 a{ 括弧 {} に囲まれた領域を選択（括弧も含めて選択） i[ 括弧 [] に囲まれた領域を選択 a[ 括弧 [] に囲まれた領域を選択（括弧も含めて選択） i&amp;lt; 括弧 &amp;lt;&amp;gt; に囲まれた領域を選択 a&amp;lt; 括弧 &amp;lt;&amp;gt; に囲まれた領域を選択（括弧を含めて選択） 例えば、ビジュアルモードで段落全体（空行で区切られた連続する行）を一気に選択するには、その段落内にカーソルがある状態で ip と入力します。 ノーマルモードから段落全体を選択状態にするには vip と入力すればよいことになります（上のデモアニメを参照）。 「段落選択はビップ」と覚えます。</description></item><item><title>Vim で C/C++ の変数／マクロの定義位置にジャンプする</title><link>https://maku77.github.io/p/96itrdp/</link><pubDate>Wed, 21 Nov 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/96itrdp/</guid><description>C/C++ の変数／マクロの定義位置にジャンプ 変数にカーソルを当てた状態で、以下のように入力すると、その変数の定義位置にジャンプすることができます。
コマンド 説明 gd ローカル変数の定義位置へジャンプ gD グローバル変数の定義位置へジャンプ 検索の精度はあまり高くありません。。。
C/C++ のマクロの定義を表示／定義位置へジャンプ C/C++ のマクロは次のような感じで定義されます。
#define BUF_SIZE 256 マクロを使用している場所から、そのマクロの定義（上記のコード）を調べるには、マクロ名にカーソルを当てた状態で次のように入力します。 #include されているファイルの内容も検索してくれます。
コマンド 説明 [D マクロの定義を表示（すべての定義を表示） [d マクロの定義を表示（最初の定義のみ） [Ctrl-d マクロの定義位置へジャンプ</description></item><item><title>Vim でカーソル位置にマークしてジャンプしてこれるようにする</title><link>https://maku77.github.io/p/i3ao6oc/</link><pubDate>Sun, 07 Oct 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/i3ao6oc/</guid><description>Vim のマーク機能を使用すると、カーソル位置に a～z、あるいは A～Z のマークを付け、別の場所からそこへジャンプして来ることができるようになります。
マークを付ける m に続けて、1 文字のアルファベットを入力すると、現在のカーソル位置にマークを設定することができます。
入力 説明 ma カーソル位置をローカルマーク a として保存（a～z を使用可能） mA カーソル位置をグローバルマーク A として保存（A～Z を使用可能） マーク用のアルファベットとして 小文字の a～z を使用すると、カレントバッファのみに有効なローカルマーク として設定されます。 大文字の A～Z を使用すると、グローバルマーク（ファイルマーク） として設定されます。 ローカルマークはファイルごとに a～z を使用することができ、グローバルマークは全体で A～Z を共有することになります。
マークを設定した位置へジャンプする 入力 説明 `a ローカルマーク a へジャンプ 'a ローカルマーク a の行頭へジャンプ `A グローバルマーク A へジャンプ 'A グローバルマーク A の行頭へジャンプ ローカルマーク (a～z) を指定してジャンプするときは、カレントバッファで開いているファイルに設定されたローカルマークがジャンプ先のターゲットとなります。
一方、グローバルマーク (A～Z) は、マークしたファイルまで一緒に記録されており、Vim でどのファイルを編集中であっても、そのファイルにジャンプすることができます。 頻繁に使用するファイルに mA でグローバルマークを設定しておけば、'A でそのファイルをいつでも簡単に開けるようになります。
また、ジャンプ元とジャンプ先で行ったり来たりするために、下記のようなジャンプコマンドを使用することができます。
入力 説明 `` バッファ内のジャンプ元へジャンプ '' バッファ内のジャンプ元の行頭へジャンプ マークの一覧を表示する 現在設定されているローカルマークとグローバルマークの一覧を表示するには、次のコマンドを実行します。</description></item><item><title>Vim でウィンドウを分割する</title><link>https://maku77.github.io/p/ym9pa88/</link><pubDate>Fri, 05 Oct 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ym9pa88/</guid><description>Vim のウィンドウを分割すると、複数のファイルの内容を同時に表示しながら作業することができます（同一ファイル内の 2 か所を表示することもできます）。
ウィンドウを分割する 入力 説明 :sp[lit] 上下に分割（編集中のファイルを開く）
Ctrl-w s としても OK :vs[plit] 左右に分割（編集中のファイルを開く）
Ctrl-w v としても OK :new 上下に分割（空のファイルを開く）
Ctrl-w n としても OK :vnew 左右に分割（空のファイルを開く） :sview [file] 閲覧用にファイルを開く
:split → :view としても OK ウィンドウを閉じる 入力 説明 Ctrl-w c カレントウィンドウを閉じる (= :q) Ctrl-w q カレントウィンドウを閉じる Ctrl-w o カレントウィンドウ以外を閉じる ウィンドウを切り替える 入力 説明 Ctrl-w w 次のウィンドウへ移動（★最低限これだけ覚えておく） Ctrl-w h 左のウィンドウへ移動 Ctrl-w j 下のウィンドウへ移動 Ctrl-w k 上のウィンドウへ移動 Ctrl-w l 右のウィンドウへ移動 ウィンドウサイズの変更 入力 説明 &amp;lt;NUM&amp;gt;z 指定した行数にウィンドウサイズを変更 Ctrl-w = すべて同じサイズにする（★これが基本） Ctrl-w + ウィンドウを縦に大きくする Ctrl-w - ウィンドウを縦に小さくする Ctrl-w _ ウィンドウを縦に最大化 Ctrl-w &amp;gt; ウィンドウを横に大きくする Ctrl-w &amp;lt; ウィンドウを横に小さくする Ctrl-w | ウィンドウを横に最大化 ウィンドウサイズを大きくするときに、先に数値を入力すると、何行大きくするかを指定できます。</description></item><item><title>Vim のヘルプコマンドの使い方 (:help, :helpgrep)</title><link>https://maku77.github.io/p/fdep5i7/</link><pubDate>Mon, 12 Mar 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/fdep5i7/</guid><description>ヘルプの起動／終了 Vim エディタから下記のコマンドを実行することで、ヘルプを起動・終了することができます。
:help &amp;hellip; ヘルプを起動する :q &amp;hellip; ヘルプを終了する ZZ &amp;hellip; ヘルプを終了する :help コマンドに渡すパラメータ :help コマンドの引数に特定のプレフィックスを付けたり、引数を引用符で囲むことで、異なるモードのコマンドのヘルプを見ることができます。
調べる項目 プレフィックスなど 例 Normal mode のキー入力 なし :help u Insert mode のキー入力 i_ :help i_CTRL-N, :help i_&amp;lt;Esc&amp;gt; Visual mode のキー入力 v_ :help v_u Command mode のキー入力 c_ :help c_&amp;lt;Del&amp;gt; ex コマンド : :help :quit オプション 'name' :help 'number' Vim の起動パラメータ - :help -t 特殊なキー入力は、CTRL-A、&amp;lt;Del&amp;gt;、&amp;lt;Esc&amp;gt; のように表現することができます（他のキーの表現方法は :help keycodes で確認できます）。
例: Ctrl-A（normal mode）のヘルプを表示する :help CTRL-A 例: Ctrl-A（insert mode）のヘルプを表示する :help i_CTRL-A 例: Vim の起動パラメータ -t のヘルプを表示する :help -t 例: number オプションのヘルプを見る :help &amp;#39;number&amp;#39; ヘルプファイルを grep する :helpgrep コマンドを使用すると、ヘルプファイル内を grep 検索することができます。</description></item><item><title>Vim のカーソル移動方法まとめ</title><link>https://maku77.github.io/p/etvrhdd/</link><pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/etvrhdd/</guid><description>カーソル移動（左右） 入力 説明 h 1 文字左へ l 1 文字右へ 0 行頭へ $ 行末へ 5| カレント行の 5 文字目へ ^ 最初の表示可能な文字へ カーソル移動（行番号指定でジャンプ） 入力 説明 gg
:1 1 行目へジャンプ 10gg
10G
:10 10 行目へジャンプ G
:$ 最終行へジャンプ :$-3 最終行より 3 行上へジャンプ :+10 カレント行から 10 行下へジャンプ 応用例: カーソル位置からファイルの最後までを削除 dG カーソル移動（画面内でジャンプ） 入力 説明 H 画面内の一番上にジャンプ（ホーム行） M 画面内の中央行にジャンプ L 画面内の一番下にジャンプ 3H 画面内の一番上から 3 行目にジャンプ 3L 画面内の一番下から 3 行目にジャンプ カーソル移動（ブロック単位でジャンプ） 入力 説明 w 次の単語の先頭へ W 次の単語の先頭へ（後続する記号も単語の一部とみなす） b 前の単語の先頭へ B 前の単語の先頭へ（後続する記号も単語の一部とみなす） e 単語の末尾へ E 単語の末尾へ（後続する記号も単語の一部とみなす） ( 現在の文の先頭へ ) 次の文の先頭へ { 現在の段落の先頭へ（空行で判断） } 次の段落の先頭へ（空行で判断） [[ 現在のセクションの先頭へ（行頭にある { を検索） ]] 次のセクションの先頭へ（行頭にある { を検索） w や b によるカーソル移動時に、どこまでを単語の切れ目と見なすかは、iskeyword オプションによって設定されています。 現在の設定値を見るには次のようにします。</description></item><item><title>Vim の画面スクロール方法まとめ</title><link>https://maku77.github.io/p/gu9om5z/</link><pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/gu9om5z/</guid><description>画面スクロール操作 画面スクロール コマンド 説明 Ctrl-f 1 画面下へスクロール Ctrl-b 1 画面上へスクロール Ctrl-d 半画面下へスクロール、あるいは scroll オプションで指定された行数だけ下へスクロール Ctrl-u 半画面上へスクロール、あるいは scroll オプションで指定された行数だけ上へスクロール 表示位置を移動 下記の操作では、カーソル位置（行）をキープしたまま、画面の表示位置だけを移動させます。
コマンド 説明 z&amp;lt;CR&amp;gt; カレント行を画面上端へ ※1 zz カレント行を画面中央へ z. カレント行を画面中央へ（カーソルを最初の非空白文字へ） zb カレント行を画面下端へ z- カレント行を画面下端へ（カーソルを最初の非空白文字へ） z+ 画面下端を画面上端へ（これ使い道ある？） Ctrl-y 1 行下へスクロール Ctrl-e 1 行上へスクロール ※1 例えば、ソースコードの関数名を定義している行で、z [Enter] とすれば、その関数の定義が画面上端から表示されます。 z コマンドは、scrolloff オプションに 0 以外が設定されていると、その値によって移動後の表示位置が少々変わります。
z コマンドを実行するときに数値プレフィックスを付けると、カレント行とみなす行番号を指定することができます。
例: 30 行目が画面上端に表示されるように移動 30z[Enter] 画面スクロール量の設定 (scroll) Ctrl-d や Ctrl-u による画面スクロール行数は、scroll オプションで設定できます。
:set scroll=3 scroll オプションのデフォルトは 0 になっており、この場合だけは「画面に表示されている行数の半分だけスクロールする」という特殊な動きをします。 個人的には、一度に画面半分もスクロールされると脳がついていけないので、3 行くらいのスクロールに変更しておくことをオススメします。</description></item><item><title>Vim の文字の置換方法まとめ (:s, :substitute)</title><link>https://maku77.github.io/p/f8v2npx/</link><pubDate>Mon, 08 Jan 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/f8v2npx/</guid><description>Vim の s (substitute) コマンドを使用すると、ファイル内の任意の範囲のテキストをまとめて置換することができます。
substitute コマンドの基本 substitute コマンドは、ノーマルモード中に下記のように入力して実行します。
:&amp;lt;行範囲&amp;gt; s/&amp;lt;置換前パターン&amp;gt;/&amp;lt;置換後パターン&amp;gt;/&amp;lt;フラグ&amp;gt; 指定した &amp;lt;行範囲&amp;gt; のテキストの中で、&amp;lt;置換前パターン&amp;gt; に一致する文字列を &amp;lt;置換後パターン&amp;gt; に置換します。 substitute コマンドは通常、上記のように省略系の s を使って実行します。
デフォルトでは、行内で最初に見つかった文字列だけを置換しますが、&amp;lt;フラグ&amp;gt; 部分に g（global フラグ）を指定することで、行内のすべての文字列を置換することができます。
:s/old/new/ &amp;#34;カレント行の文字列を置換（1 つだけ置換） :s/old/new/g &amp;#34;カレント行の文字列を置換（すべて置換） 上記のように &amp;lt;行範囲&amp;gt; の指定を省略した場合は、カレント行のみが置換対象になりますが、そのような使い方はまれでしょう。 ファイル内の全ての行を置換対象にしたい場合は、&amp;lt;行範囲&amp;gt; として % を指定します（1,$ としても同様）。 下記の例では、% の後ろにスペースを入れていますが、このスペースは省略することができます。
:% s/old/new/g &amp;#34;ファイル全体の文字列を置換 置換対象とする行範囲を指定したい時は、下記のように明示的に 開始行,終了行 を指定することもできますし、
:1,5 s/old/new/g &amp;#34;1～5行目までを置換対象にする :5,$ s/old/new/g &amp;#34;5行目～最終行までを置換対象にする Shift-V で行選択した状態から、:s/old/new/g と続けて実行することもできます（こちらの方法がオススメ）。 行選択した状態で : をタイプすると、コマンドの入力欄には下記のように表示されますが、これは行選した択範囲を操作対象としていることを示しています。 そのまま s/old/new/g と続けて入力すれば OK です。
:&amp;#39;&amp;lt;,&amp;#39;&amp;gt; 区切り文字にスラッシュ (/) 以外を使用する :s/old/new/g という置換コマンド自体がスラッシュを含んでいるため、置換対象の文字列にスラッシュが含まれる場合は、下記のようにバックスラッシュを使ったエスケープ処理が必要です（/ ではなく \/ と入力する）。</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vim on 天才まくまくノート</title><link>https://maku77.github.io/vim/</link><description>Recent content in Vim on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 11 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim/NeoVim で OS のクリップボードとヤンクレジスターを連動させる (clipboard)</title><link>https://maku77.github.io/p/nnhefs3/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/nnhefs3/</guid><description>Vim/NeoVim のデフォルト設定では、y でテキストをヤンク（コピー）したときに、OS のクリップボードにテキストの内容がコピーされません。 別のアプリ上で Ctrl+C でコピーした内容も、Vim の p でペーストすることができません。 これでは不便なので、多くの場合は次のように OS のクリップボードと連動させます。
Vim (~/.vimrc) や NeoVim (init.vim) の場合 &amp;#34; OS のクリップボードと連動させる set clipboard+=unnamed,unnamedplus NeoVim (init.lua) の場合 -- OS のクリップボードと連動させる vim.opt.clipboard:append({ &amp;#34;unnamed&amp;#34;, &amp;#34;unnamedplus&amp;#34; }) 細かい説明をすると、unnamed というフラグは * レジスターとの連動、unnamedplus というフラグは + レジスターとの連動を意味するのですが、通常は上記のように両方とも設定しておけば問題ありません。</description></item><item><title>Vim/NeoVim の設定ファイルから別の設定ファイルを読み込む (source, dofile)</title><link>https://maku77.github.io/p/dnso7ds/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/dnso7ds/</guid><description>複数の環境で Vim や NeoVim を使用しているときは、設定ファイルを GitHub や Dropbox などの共有サービスで共有すると便利です。 共有した設定ファイルは、Vim の :source や NeoVim (Lua) の :dofile() などで読み込むことができます。
Vim (~/.vimrc) の場合 &amp;#34; Linux/macOS の例 source $HOME/Dropbox/share/config/vim/vimrc &amp;#34; Windows の例 source D:/Dropbox/share/config/vim/vimrc NeoVim (~/.config/nvim/init.lua) の場合 -- Linux/macOS の例 local home = os.getenv(&amp;#34;HOME&amp;#34;) dofile(home .. &amp;#34;/Dropbox/share/config/nvim/init.lua&amp;#34;) -- Windows の例 dofile(&amp;#34;D:/Dropbox/share/config/nvim/init.lua&amp;#34;)</description></item><item><title>Vim で &lt;Leader> キーを使ったキーコンビネーションを定義する (mapleader)</title><link>https://maku77.github.io/p/c9kmay4/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/c9kmay4/</guid><description>Vim の Leader キー は、キーマッピングを定義するときに使用可能なプレフィックスキーです。
Leader キーとは 例えば、.vimrc で次のようなキーマップ設定があったとします。
.vimrc（Leader キーの使用例） nmap &amp;lt;Leader&amp;gt;a :echo &amp;#34;Hello&amp;#34;&amp;lt;CR&amp;gt; nmap &amp;lt;Leader&amp;gt;b :echo &amp;#34;World&amp;#34;&amp;lt;CR&amp;gt; これは、Leader キーに続けて a キーや b キーを入力することで、Hello や World と表示するキーコンビネーションを定義しています。 つまり、Leader キーはキーコンビネーションのためのプレフィックスキー です（実際には任意の位置で使えます）。
Leader キーには、デフォルトでバックスラッシュ (\) が割り当てられているため、上記の設定を行った場合は、\a と入力することで Hello と表示されることになります。 次のように直接バックスラッシュキー (&amp;lt;Bslash&amp;gt;) を使って定義するのとは何が違うのでしょうか？
.vimrc nmap &amp;lt;Bslash&amp;gt;a :echo &amp;#34;Hello&amp;#34;&amp;lt;CR&amp;gt; nmap &amp;lt;Bslash&amp;gt;b :echo &amp;#34;World&amp;#34;&amp;lt;CR&amp;gt; Leader キーを使ったキーマッピングには、次のような利点があります。
Leader キーは単なるプレフィックキーだということを強調できる（特に自分の .vimrc を公開するとき） Leader キーだけを変更したくなったときに、まとめて置き換えられる（Leader キーは任意のキーに設定できます） 他のユーザーの .vimrc 設定を使いまわしやすい（自分の好きな Leader キーで使える） Plugin の中でキーマッピングを定義するときに Leader キーを使うことで、ユーザーによるキー設定の余地を残す Leader キーを設定する (mapleader) Leader キーを任意のキーに設定するには、次のように g:mapleader 変数を設定します。 デフォルトではバックスラッシュキーが使用されますが、決して押しやすいキーではないので、スペースキーやカンマを Leader キーとして使用する人が多いようです。</description></item><item><title>Vim のキーマップ例: ショートカットキーでカレントディレクトリを Windows エクスプローラーや Mac の Finder で開く</title><link>https://maku77.github.io/p/tqmr4od/</link><pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/tqmr4od/</guid><description>Vim/NeoVim で次の設定を行っておくと、現在編集中のファイルが格納されたディレクトリをショートカットキー（ここでは F12 キー）一発で開くことができます。 Windows の場合は start コマンドを使って「エクスプローラー」を開き、Mac の場合は open コマンドを使って「Finder」を開くようにしています。
NeoVim（Lua スクリプト）の場合 ~/.config/nvim/init.lua -- 編集中ファイルが格納されたディレクトリを開く関数 function open_dir() local command if vim.fn.has(&amp;#39;mac&amp;#39;) == 1 then command = &amp;#39;open&amp;#39; elseif vim.fn.has(&amp;#39;win32&amp;#39;) == 1 or vim.fn.has(&amp;#39;win64&amp;#39;) == 1 then command = &amp;#39;start&amp;#39; else print(&amp;#39;Could not open the directory (unsupported OS)&amp;#39;) return end local file_dir = vim.fn.expand(&amp;#39;%:p:h&amp;#39;) vim.fn.system(command .. &amp;#39; &amp;#39; .. file_dir) end -- F12 キーにマップする vim.api.nvim_set_keymap(&amp;#34;n&amp;#34;, &amp;#34;&amp;lt;F12&amp;gt;&amp;#34;, &amp;#34;:lua open_dir()&amp;lt;CR&amp;gt;&amp;#34;, { noremap = true, silent = true } ) Vim（Vim スクリプト）の場合 ~/.</description></item><item><title>Vim/NeoVim でインサートモード中に Backspace キーや CTRL-W で文字を削除するときの振る舞いを変更する (backspace)</title><link>https://maku77.github.io/p/b9tsccu/</link><pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/b9tsccu/</guid><description>backspace オプション（Vim の場合） Vim エディタでは、インサートモード中に Backspace キーを押すと、入力した文字が削除されますが、デフォルトではインサートモードに入ったカーソル位置より前の文字を削除することはできません。 代表的な削除系のキー入力は、下記のような振る舞いをします。
Backspace: カーソル位置の直前の 1 文字を削除する。ただし、インサートモードに入ったときのカーソル位置までしか削除できない。 CTRL-W: カーソル位置の直前の 1 単語を削除する。ただし、インサートモードに入ったときのカーソル位置までしか削除できない。 CTRL-U: カーソル位置からインサートモードに入ったときのカーソル位置までを削除する。 backspace オプションを設定すると、上記のようなキー入力によって削除可能な文字の範囲を広げることができます。 backspace オプションには次のような値をカンマ区切りで設定します。
indent: オートインデント機能で挿入されたスペースを削除できる eol: 改行を削除できる（前の行に遡って削除していける） start: インサートモードに入ったときのカーソル位置よりも前の文字を削除できる（ただし、CTRL-W や CTRL-U による削除は、インサートモードに入ったカーソル位置までで削除範囲が一度止まる） 設定例 (~/.vimrc) &amp;#34; インサートモード中の BS、CTRL-W、CTRL-U による文字削除を柔軟にする set backspace=indent,eol,start 上記のように設定しておくと、それぞれの削除系のキー入力の振る舞いは下記のように変化します。
Backsapce: カーソル位置の直前の 1 文字を削除する。インサートモードに入った時のカーソル位置よりも前の文字を削除できる。 CTRL-W: カーソル位置の直前の 1 単語を削除する。インサートモードに入った時のカーソル位置よりも前の単語を削除できる。ただし、インサートモードに入った時のカーソル位置も単語の境界とみなす。 CTRL-U: カーソル位置から行頭までを削除する。ただし、インサートモードに入ったときのカーソル位置も行頭とみなす。 backspace オプション (NeoVim の場合） NeoVim の場合は、backspace オプションの設定値が デフォルトで indent,eol,start となっているため、何も設定しなくても Backspace キーが直感的に振る舞います（編集開始位置よりも前の文字を削除できます）。</description></item><item><title>Vim で現在のキーマップの一覧を表示する (map)</title><link>https://maku77.github.io/p/7uxykzp/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/7uxykzp/</guid><description>参考: Vim のキーマップの基本 (map, noremap) ユーザ定義のキーマップを確認する Vim でユーザが定義しているキーマップの一覧を表示するには、下記のように map 系のコマンドをパラメータなしで実行します。
キーマップの一覧を表示 :map &amp;#34; ノーマルモードとビジュアルモードのキーマップ :nmap &amp;#34; ノーマルモードのキーマップ :vmap &amp;#34; ビジュアルモードのキーマップ :imap &amp;#34; インサートモードのキーマップ :cmap &amp;#34; コマンドラインモードのキーマップ :map! &amp;#34; インサートモードとコマンドラインモードのキーマップ また、次のように verbose コマンド（省略形は verb）と組み合わせて使用すると、そのキーマップがどの設定ファイルで定義されているかを確認することができます。
キーマップの一覧と定義元のファイルを表示 :verbose map :verbose nmap :verbose vmap :verbose imap :verbose cmap :verbose map! デフォルトのキーマップを確認する Vim がデフォルト定義しているキーマップの一覧は、下記のヘルプファイルで参照することができます。
:help index.txt :help index 例えば、インサートモード時の Ctrl-H がどのようなマッピングになっているかは、i_CTRL-H という項目に記述されています（same as &amp;lt;BS&amp;gt; と書かれているので、BackSpace キーと同様の振る舞いをします）。
初めからどのモードのキーマッピングを調べたいかが決まっているときは、上記のようにヘルプを起動する代わりに、下記のように起動するとそのセクションから読み始めることができます。
:help normal-index &amp;#34; ノーマルモードのデフォルトマッピングを表示 :help visual-index &amp;#34; ビジュアルモードのデフォルトマッピングを表示 :help insert-index &amp;#34; インサートモードのデフォルトマッピングを表示 もっと具体的に、調べたいキーコンビネーションが決まっている場合は、そのキーに対応するヘルプを直接開くことができます。</description></item><item><title>Vim のサイレントバッチモードで ex スクリプトをファイルに適用する (-es)</title><link>https://maku77.github.io/p/q7eoz2z/</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/q7eoz2z/</guid><description>vim (gvim) コマンドを起動するときに、-es オプションを使用すると、サイレントバッチモードで起動し、任意の ex スクリプトを指定したファイルに適用することができます。
例えば、下記のスクリプトは AAA という文字を XXX に置換して保存するだけの簡単な ex スクリプトです。
replace.vim :%s/AAA/XXX/g :wq このスクリプトを任意のテキストファイル (ここでは input.txt) に適用するには、下記のように実行します。
$ gvim -es -S replace.vim input.txt 例えば、入力したファイルの内容が下記のような内容だとすると、
input.txt AAA BBB AAA BBB BBB AAA BBB AAA AAA BBB AAA BBB 次のように変更されます。
input.txt（変更後） XXX BBB XXX BBB BBB XXX BBB XXX XXX BBB XXX BBB 指定したファイル自体の内容が変更されることに注意してください。 ex スクリプトの中で wq を実行しているため、上書き保存して終了するところまでがワンセットで実行されます。
-eq オプションの代わりに、-c オプションを使用すると、コマンドラインで直接 ex コマンドを指定して実行することができます。
$ gvim -c &amp;#34;%s/AAA/XXX/g&amp;#34; -c &amp;#34;wq&amp;#34; input.</description></item><item><title>Vim のキーマップ例: ショートカットキーで .vimrc ファイルを開く</title><link>https://maku77.github.io/p/r5fcfgk/</link><pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/r5fcfgk/</guid><description>ショートカットキーで .vimrc を開く Vim/NeoVim の設定ファイルで、下記のようにキーマッピング設定をしておくと、F1 キーを押すだけで簡単に .vimrc ファイル（NeoVim の場合は init.vim）を開けるようになります。
Vim の .vimrc あるいは NeoVim の init.vim &amp;#34; F1 キーで設定ファイルを開く if has(&amp;#39;nvim&amp;#39;) &amp;#34;NeoVim の場合 nnoremap &amp;lt;F1&amp;gt; :tabnew &amp;lt;C-R&amp;gt;=expand(stdpath(&amp;#39;config&amp;#39;)) . &amp;#39;/init.vim&amp;#39;&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt; else &amp;#34;Vim の場合 nnoremap &amp;lt;F1&amp;gt; :tabnew $MYVIMRC&amp;lt;CR&amp;gt; endif ここでは、:tabnew コマンドを使って、新しいタブで設定ファイルを開くようにしています。 NeoVim と Vim で設定ファイルのパスが異なるので、if has('nvim') で分岐しています。 さらに、NeoVim の設定ファイルのパスは、Windows と Linux/macOS で異なりますが、stdpath('config') を使って親ディレクトリのパスを取得すればコードを共通化できます。
NeoVim の Lua 版の設定ファイル (~/.config/nvim/init.lua) を使う場合は、次のように設定します。
NeoVim の init.lua -- ノーマルモード時に &amp;lt;F1&amp;gt; キーで設定ファイルを開く vim.api.nvim_set_keymap(&amp;#39;n&amp;#39;, &amp;#39;&amp;lt;F1&amp;gt;&amp;#39;, &amp;#39;:tabnew &amp;#39; .. vim.</description></item><item><title>Vim のキーマップ例: ショートカットキーで日時を挿入する</title><link>https://maku77.github.io/p/8xk6jnw/</link><pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/8xk6jnw/</guid><description>ショートカットキーで strftime 関数を実行する Vim で以下の設定をしておくと、ショートカットキーで 2014-01-27 のような本日の日付を挿入することができます。 ここでは、Ctrl-D → Ctrl-D というキーコンビネーションに割り当てていますが、任意の組み合わせに変更することができます。
~/.vimrc（Ctrl-D Ctrl-D で日付を挿入） imap &amp;lt;silent&amp;gt; &amp;lt;C-D&amp;gt;&amp;lt;C-D&amp;gt; &amp;lt;C-R&amp;gt;=strftime(&amp;#34;%Y-%m-%d&amp;#34;)&amp;lt;CR&amp;gt; nmap &amp;lt;silent&amp;gt; &amp;lt;C-D&amp;gt;&amp;lt;C-D&amp;gt; &amp;lt;ESC&amp;gt;i&amp;lt;C-R&amp;gt;=strftime(&amp;#34;%Y-%m-%d&amp;#34;)&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;&amp;lt;ESC&amp;gt; imap と nmap の両方で定義しているので、挿入モードのときも、ノーマルモードのときも、ショートカットキーを入力して日付の挿入を行うことができます。 &amp;lt;silent&amp;gt; を入れることで、コマンドラインのエコーを防いでいます。 &amp;lt;C-R&amp;gt;= というのは、その後ろに記述した式を実行して展開するためのイディオムです（= は Expression register を示しており、詳細は :help i_Ctrl-R で確認できます）。 日付の挿入を頻繁に実行するのであれば、F1 キーのような単独キーに割り当てるようにすれば、さらに手軽に実行できるようになります。
~/.vimrc（F1 キーで日付を挿入、F2 キーで日付＋曜日を挿入） imap &amp;lt;silent&amp;gt; &amp;lt;F1&amp;gt; &amp;lt;C-R&amp;gt;=strftime(&amp;#34;%Y-%m-%d&amp;#34;)&amp;lt;CR&amp;gt; imap &amp;lt;silent&amp;gt; &amp;lt;F2&amp;gt; &amp;lt;C-R&amp;gt;=strftime(&amp;#34;%Y-%m-%d (%a)&amp;#34;)&amp;lt;CR&amp;gt; ちなみに、F1 キーはデフォルトではヘルプの起動 (:help) のショートカットキーとして設定されているため、上記のように設定すると、F1 キーでヘルプを起動することはできなくなります（まったく問題ないと思いますが）。 また、キーシーケンスの都合で、Ctrl-1 といった Ctrl キーと数字キーの組み合わせはうまく動作しません。
strftime 関数のフォーマット一覧 Vim の strftime のフォーマット文字列で使用できる記号 (%Yなど）は、C 言語の strftime 関数と同様のものです。 なので、Linux 環境や macOS 環境であれば、下記のようにして C 言語の man ページで詳細を確認できます。</description></item><item><title>Vim のキーマップの基本 (map, noremap)</title><link>https://maku77.github.io/p/nqqixxy/</link><pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/nqqixxy/</guid><description>Vim のキーマップとは Vim の *map 系コマンドを使うと、キーマップ（キーバインド）を定義できます。 キーマップとは、特定のキー入力（キーシーケンス）を別のキー入力に変換する機能です。 例えば、&amp;lt;F1&amp;gt; キーを押すことで :help コマンドを実行するように設定することができます。 頻繁に使うコマンドを短いキーシーケンスに割り当てることで、効率的に作業できるようになります。
Vim では、ノーマルモード、インサートモード、ビジュアルモード、コマンドラインモードなど、それぞれのモードごとにキーマップを定義できます。 また、noremap 系コマンドを使うことで、マッピングの伝播を防ぐことができます。
キーマップのヘルプ Vim のキーマップに関するヘルプドキュメントは、以下のコマンドで表示することができます。 必要に応じて参照してください。
:help map.txt :help key-mapping map 系コマンドによるキーマッピング キーマップの設定を行うには、主に以下のようなコマンドを使用します。 コマンドを使い分けることによって、特定のモードでだけ有効なマッピングを定義できます。
map &amp;hellip; ノーマルモード、ビジュアルモード用のキーマッピング nmap &amp;hellip; ノーマルモード用のキーマッピング vmap &amp;hellip; ビジュアルモード用のキーマッピング imap &amp;hellip; インサートモード用のキーマッピング cmap &amp;hellip; コマンドラインモード用のキーマッピング よく使用するのは、ノーマルモード用のマップ定義を行う nmap と、インサートモード用のマップ定義を行う imap です。
マッピングの定義は、以下のような形式で行います。
キーマップの基本的な書式 :nmap ＜入力するキーシーケンス＞ ＜実行するコマンド＞ :imap ＜入力するキーシーケンス＞ ＜実行するコマンド＞ 例えば、下記のように実行したあとで、インサートモードで Ctrl キーを押しながら F10 キーを 2 回押すと、カーソル位置に Hello World が挿入されます。
キーマップの例（インサートモード用） :imap &amp;lt;C-F10&amp;gt;&amp;lt;C-F10&amp;gt; Hello World ☝️ ワンポイント &amp;lt;C-F10&amp;gt; は Ctrl キーを押しながら F10 キーを押すことを表します。 このようなキー入力の表現方法は、:help key-notation で詳しく説明されています。 もっと単純に F10 キー 1 つに割り当ててもよかったのですが、ここではこんな複雑なキーシーケンスにもマッピングできるよという例を示しています。 同様のキーシーケンスをノーマルモード用に割り当てる場合は、下記のように先に i コマンドでインサートモードに入らないといけないことに注意してください。 最後には &amp;lt;Esc&amp;gt; でノーマルモードに戻ってあげると行儀が良いです。</description></item><item><title>Vim/NeoVim でビジュアルモードで簡単にインデントを行えるようにする</title><link>https://maku77.github.io/p/hoihkfy/</link><pubDate>Sun, 26 May 2013 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/hoihkfy/</guid><description>ビジュアルモードで複数行を選択してインデントするには、&amp;gt;&amp;gt; や &amp;lt;&amp;lt; を使いますが、このコマンドを入力すると、ビジュアルモードを抜けてしまうので、連続してインデントを行いたい場合にちょっと面倒です（何回インデントすればよいか分かっていれば 3&amp;gt;&amp;gt; のように回数を指定することはできますが…）。
下記のような設定を入れておくと、ビジュアルモード中のインデントを、&amp;gt; あるいは &amp;lt; だけで行うことができるようになります。 さらに、このコマンドを入力した後も、ビジュアルモードを抜けずにキープしてくれるので、行選択したまま連続してインデントを行うことができます。
&amp;#34; Reselect visual block after indent/outdent vnoremap &amp;lt; &amp;lt;gv vnoremap &amp;gt; &amp;gt;gv 同様に、選択範囲の自動インデントを行う = コマンド にも適用できます。
&amp;#34; Stay visual mode after formatting code vnoremap = =gv 参考 インデント用のスペースを入力する（シフトコマンド） (&amp;gt;&amp;gt;, &amp;lt;&amp;lt;, Ctrl-T, Ctrl-D)</description></item><item><title>Vim で正規表現にマッチする行を削除する</title><link>https://maku77.github.io/p/ngf6w24/</link><pubDate>Thu, 06 Dec 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ngf6w24/</guid><description>正規表現に一致するテキストが見つかった行をすべて削除する 下記のように実行すると、正規表現に一致するテキストを含む行をまとめて削除することができます。
:g/正規表現/d 例えば、以下のようなファイルリストが書かれたテキストから、バックアップファイル（~ で終わる行）を削除するには、
src/main.h src/main.h~ src/main.cpp src/main.cpp~ 以下のようなコマンドを入力します。
:g/\~$/d 正規表現に一致するテキストが「見つからない」行をすべて削除する 逆に、指定した正規表現に一致するテキストが 見つからない 行を削除するには、下記のように実行します。
:v/正規表現/d</description></item><item><title>Vim の map、noremap 系コマンドで使用できる特殊キーの一覧 (key-notation, key-codes)</title><link>https://maku77.github.io/p/ibpmg65/</link><pubDate>Fri, 27 Jul 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ibpmg65/</guid><description>参考: Vim のキーマップの基本 (map, noremap) キーマップに使えるキー名の一覧 Vim の map 系コマンド（nmap や imap）で、F1 キーや BackSpace キーなどの特殊キーを使用したマッピングを行う場合は、下記のヘルプページで表示されるキー表記を使用します。
キー表記のヘルプ :help key-notation 例えば、特殊キーを表すために次のような表記が使えることがわかります。
&amp;lt;BS&amp;gt; &amp;hellip; Back Space キー &amp;lt;Bslash&amp;gt; &amp;hellip; Back Slash キー (\) &amp;lt;CR&amp;gt; or &amp;lt;Enter&amp;gt; &amp;hellip; Enter キー（&amp;lt;CR&amp;gt; がよく使われている） &amp;lt;Esc&amp;gt; &amp;hellip; Esc キー &amp;lt;Space&amp;gt; &amp;hellip; スペースキー &amp;lt;Tab&amp;gt; &amp;hellip; Tab キー &amp;lt;Del&amp;gt; &amp;hellip; Delete キー &amp;lt;Up&amp;gt;/&amp;lt;Down&amp;gt;/&amp;lt;Left&amp;gt;/&amp;lt;Right&amp;gt; &amp;hellip; 上下左右カーソルキー &amp;lt;F1&amp;gt; 〜 &amp;lt;F12&amp;gt; &amp;hellip; ファンクションキー &amp;lt;Help&amp;gt; &amp;hellip; Help キー &amp;lt;Insert&amp;gt; &amp;hellip; Insert キー &amp;lt;Home&amp;gt; &amp;hellip; Home キー &amp;lt;End&amp;gt; &amp;hellip; End キー &amp;lt;PageUp&amp;gt; &amp;hellip; Page Up キー &amp;lt;PageDown&amp;gt; &amp;hellip; Page Down キー Shift キー、Control キー、Alt (Meta) キー、Command キー（macOS のみ）といったキーとの同時押しを表現するには、次のように記述します。</description></item><item><title>Vim でカーソル位置の単語をファイル名としてファイルを開く (gf, Ctrl-w gf, Cgtrl-w f)</title><link>https://maku77.github.io/p/sok5efu/</link><pubDate>Thu, 03 May 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/sok5efu/</guid><description>ファイル名にカーソルを当ててファイルを開く Vim でファイル名っぽい文字列にカーソルを置いて、gf と入力すると、その名前のファイルを開くことができます（Goto File と覚えてください）。 同じウィンドウでファイルを開くため、その前に編集していたファイルの内容は一時的に見えなくなってしまうのですが、CTRL-o とすれば元のファイルに簡単に戻ってくることができます。
入力 説明 gf カーソルの下のファイルを開く CTRL-o 元のファイルに戻る 元のファイルに戻るときに、CTRL-o の代わりに CTRL-^ を使用することもできます。 CTRL-^ は直前のファイルに戻るという意味のコマンドで、続けて入力すると、2 つのファイルの間で行ったり来たりすることができます。
新しいタブで開く カーソル下のファイル名でファイルを開くときに gf を使用するとカレントバッファで開きますが、Ctrl-w を組み合わせることで、新しいタブや、ウィンドウ分割でファイルを開くことができます。
入力 説明 gf カレントバッファに開く Ctrl-w gf 新しいタブで開く （オススメ） Ctrl-w f ウィンドウを分割して開く 若干複雑な操作になりますが、このコマンドには慣れておくことをお勧めします。</description></item><item><title>Vim の文字の削除方法まとめ (d, delete)</title><link>https://maku77.github.io/p/qbmdoef/</link><pubDate>Wed, 21 Dec 2011 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/qbmdoef/</guid><description>ノーマルモード時 入力 説明 dd 現在行を削除 D 行末までを削除（C なら行末まで削除して入力モードに） diw カーソル位置の単語を削除（単語の後ろのスペースも削除） daw カーソル位置の単語を削除（単語の後ろのスペースは残す） ciw カーソル位置の単語を削除して入力モードへ（単語の後ろのスペースも削除） caw カーソル位置の単語を削除して入力モードへ（単語の後ろのスペースは残す） 入力モード時 入力 説明 C-w カーソル位置から直前の単語までを削除 C-u カーソル位置から行頭までを削除 応用例: パターンに一致する「行全体」を削除する あるパターンに一致する文字列を含む 行全体 を削除したい場合は、行範囲と組み合わせて d (delete) コマンドを使用します。 置換コマンドの s コマンドと同様に、最初に行範囲の指定を行います。
:行範囲 d 行範囲を指定しない場合は、カレント行のみが対象になります。 つまり、:d というコマンドは、dd と同様にカレント行のみを削除します。
入力 説明 :d カレント行を削除 :% d すべての行を削除 :1,10 d 1〜10 行目を削除 :g/temp/ d temp を含む行を削除 :g/^#/ d # で始まる行を削除 :g/^$/ d 空行をすべて削除</description></item><item><title>Vim/NeoVim で制御文字（改行、タブ文字、行末のスペースなど）を表示する (list, listchars)</title><link>https://maku77.github.io/p/s596qii/</link><pubDate>Sun, 24 Apr 2011 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/s596qii/</guid><description>list モードとは Vim/NeoVim の list モードを有効にすると、テキストファイル内の制御文字や空白文字（タブや末尾のスペースなど）を視覚的に表示することができます。 例えば、プログラミング言語の Python などでコーディングを行っているときは、タブ文字と通常のスペースを意識して使い分けなければいけないので、このような非表示文字を目に見えるように設定しておくことには意味があります。 もちろん通常の文章を記述するときにも、行末の余計なスペースなどを簡単に見つけられるようになるので、この設定は常に有効にしておくことをオススメします。
list モードは、Vim でも NeoVim でもデフォルトでは無効になっているため、明示的に有効化する必要があります。
:set list &amp;#34;制御文字を表示 :set nolist &amp;#34;制御文字を非表示 次のように行範囲（全ての行）を指定して list コマンドを実行すると、一時的に制御文字を確認することができます。
:% list 制御文字の表示方法の設定 (listchars) タブや改行などの制御文字をどのように表示するかは、listchars (lcs) オプションで設定します。
デフォルト設定 listchars のデフォルト値は Vim と NeoVim で次のように異なっています。
&amp;#34; Vim のデフォルト設定 set listchars=eol:$ &amp;#34; NeoVim のデフォルト設定 set listchars=tab:&amp;gt;\ ,trail:-,nbsp:+ Vim のデフォルト設定では、タブ文字が ^I 、改行が $ で表示されます。 NeoVim のデフォルト設定では、タブ文字が &amp;gt; 、行末のスペースが - で表示されます。
listchars の設定例 Vim (~/.vimrc) の場合 &amp;#34; 制御文字の設定 set listchars=tab:&amp;gt;.,trail:_,eol:$ set list NeoVim (~/.</description></item><item><title>Vim 内で grep を実行して見つかったファイルへジャンプする (:vimgrep, :grep)</title><link>https://maku77.github.io/p/c4q8amz/</link><pubDate>Mon, 13 Sep 2010 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/c4q8amz/</guid><description>内部 grep (internal grep) と外部 grep (external grep) Vim には自身に搭載されている検索機能を実行する 内部 grep と、外部の grep 系コマンドを実行する 外部 grep の機能が存在します。
内部 grep を起動するコマンド &amp;hellip; :vim（:vimgrep の省略形） 外部 grep を起動するコマンド &amp;hellip; :grep :vimgrep による検索（内部 grep） :vimgrep の概要 内部 grep（:vim あるいは :vimgrep）は、Vim に組み込まれた grep 機能を使用するため、どの OS 上でも共通の振る舞いの検索を実行することができます。 検索にヒットした行は Vim 内部の QuickFix List という配列データに追加され、そこから見つけた行にジャンプすることができます（参考: :help quickfix.txt）。
書式 :vim /{pattern}/[g][j] {file} ... g オプション &amp;hellip; 同じ行の中にパターンに一致する部分が複数あった場合に、QuickFix List に別々に追加します。デフォルトでは、同じ行内で複数回検索にヒットしても、その行は 1 度だけ QuickFix List に追加されます。多くのケースでは、このオプションを指定する必要はないでしょう。 j オプション &amp;hellip; デフォルトでは検索で最初にマッチした行にカーソルが移動します。j オプションを付けると、カーソルの位置は移動しません。 基本的な検索 例: 現在開いているファイルを grep :vim /hoge/ % % は現在開いているファイル名を表します。</description></item><item><title>Vim で大文字と小文字を区別しないで検索する (ignorecase)</title><link>https://maku77.github.io/p/mfcba2q/</link><pubDate>Tue, 18 May 2010 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/mfcba2q/</guid><description>Vim で / や :vimgrep による検索を行うときに、大文字・小文字を区別するかどうかの設定は下記のように行います（デフォルトでは大文字・小文字を区別します）。
:set ignorecase &amp;#34;大文字と小文字を区別しない （ic と省略可能） :set noignorecase &amp;#34;大文字と小文字を区別する （noic と省略可能） この設定にかかわらず、検索時に大文字・小文字を区別するかを指定するには、検索パターンの中に \c や \C を含めるようにします。
検索時に大文字・小文字を区別を指定 /\cfoo &amp;#34; 大文字、小文字を区別せずに foo を検索 /\Cfoo &amp;#34; 大文字、小文字を区別して foo を検索 検索パターン中の \c と \C は、先頭で指定する必要はなく、パターン内のどこにあっても構いません。
検索に関する設定方法の詳細は下記を参照してください。
参考: Vim の検索に関する設定 (ignorecase, smartcase, wrapscan, hlsearch, incsearch)</description></item><item><title>Vim/NeoVim ですでに入力されているタブをスペースに変換する (:retab)</title><link>https://maku77.github.io/p/w4qm7ok/</link><pubDate>Mon, 07 Dec 2009 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/w4qm7ok/</guid><description>expandtab オプションが設定されていると、TAB キーを押したときに、タブ文字の代わりに tabstop で設定した数のスペースが挿入されます。 すでに入力されているタブ文字を、スペースに変換するには、expandtab モードを有効にしたうえで、:retab コマンドを実行します。
例: タブ文字を 4 文字分のスペースに置換する :set expandtab :set tabstop=4 :retab 参考 タブ文字の設定 (tabstop, expandtab, softtabstop)</description></item><item><title>Vim/NeoVim で選択した範囲を自動インデントする (=)</title><link>https://maku77.github.io/p/pxpgasg/</link><pubDate>Mon, 07 Dec 2009 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/pxpgasg/</guid><description>自動インデントの実行 ソースコードの一部分のインデントが崩れているような場合は、以下のように自動整形することができます。
対象となるコードをビジュアルモードで行選択（Shift-V + 行選択）。 = と入力 自動インデントを整形するときに使用するプログラムを指定する = コマンドで自動インデントを行う場合は、デフォルトでは Vim 内部の整形プログラムが使用されますが、任意のインデント用プログラムを使用するように設定することもできます。
:set equalprg=/usr/local/bin/indent 参考 自動インデントモードを有効にする (autoindent, smartindent, cindent)</description></item><item><title>Vim/NeoVim で行番号を表示する (set number, vim.opt.number)</title><link>https://maku77.github.io/p/t8o6tum/</link><pubDate>Wed, 09 Sep 2009 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/t8o6tum/</guid><description>行番号の表示・非表示 Vim の場合 (set number) Vim で各行の行頭に行番号を表示するには、:set number を実行します。 逆に、行番号を非表示にするには、:set nonumber を実行します（デフォルト）。 常にこの設定を有効化しておきたいときは、設定ファイル ~/.vimrc（NeoVim なら ~/.config/nvim/init.vim）に次のように記述しておきます。
~/.vimrc set number &amp;#34;Print the line number in front of each line. NeoVim の場合 (vim.opt.number) NeoVim の init.lua で行番号の表示・非表示の設定を行う場合は、vim.opt.number をセットします。
~/.config/nvim/init.lua vim.opt.number = true -- 行番号を表示する 行番号のカラー設定 (highlight LineNr) Vim で行番号の背景色や文字色を変更するには highlight (hi) コマンドで、カラーグループ LineNr を設定します。
:highlight LineNr guifg=Black guibg=DarkGray ctermfg=Black ctermbg=DarkGray</description></item><item><title>Vim のキーマップ例: ショートカットキーでタブを切り替える</title><link>https://maku77.github.io/p/ksmwhv8/</link><pubDate>Tue, 03 Feb 2009 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ksmwhv8/</guid><description>Vim のキーマップ設定で、Ctrl + TAB でタブを切り替えるように設定してみます。 また、Ctrl + Shift + TAB で 1 つ前のタブに戻れるようにします。
~/.vimrc &amp;#34;Go to next tab nmap &amp;lt;C-Tab&amp;gt; :tabnext&amp;lt;CR&amp;gt; &amp;#34;Go to previous tab nmap &amp;lt;C-S-Tab&amp;gt; :tabprevious&amp;lt;CR&amp;gt; Ctrl + TAB の組み合わせがうまく動作しない端末のために、他のキーマッピングを割り当てておいた方がよいかもしれません。 次の例では、Ctrl + J か Ctrl + H で前のタブへ移動、Ctrl + K か Ctrl + M で後ろのタブへ移動できるように設定しています。
&amp;#34;------------- &amp;#34; Change the tab (some terminal cannot handle C-Tab) &amp;#34;------------- &amp;#34;Go to next tab nmap &amp;lt;C-Tab&amp;gt; :tabnext&amp;lt;CR&amp;gt; nmap &amp;lt;C-l&amp;gt; :tabnext&amp;lt;CR&amp;gt; nmap &amp;lt;C-k&amp;gt; :tabnext&amp;lt;CR&amp;gt; &amp;#34;Go to previous tab nmap &amp;lt;C-S-Tab&amp;gt; :tabprevious&amp;lt;CR&amp;gt; nmap &amp;lt;C-j&amp;gt; :tabprevious&amp;lt;CR&amp;gt; nmap &amp;lt;C-h&amp;gt; :tabprevious&amp;lt;CR&amp;gt; ちなみに、nmap ではノーマルモード用のキーマップ設定を行います。 インサートモードでも同様にタブ切り替えを行えるようにするには、下記のように追加で imap でキーマップ定義を行います。</description></item><item><title>Vim/NeoVim で全角スペースを見えるように表示する</title><link>https://maku77.github.io/p/preoa93/</link><pubDate>Tue, 03 Feb 2009 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/preoa93/</guid><description>全角スペースを表示するための設定 Vim の設定ファイルに下記のように記述しておくと、全角スペースに背景色が付いて判別できるようになります。 ここでは、GVim の場合に背景色として darkgray を指定していますが、好みの背景色に変更して適用してください。
Vim (~/.vimrc) の場合 &amp;#34; Show double byte spaces hi DoubleByteSpace term=underline ctermbg=blue guibg=darkgray match DoubleByteSpace /　/ NeoVim (~/.config/nvim/init.lua) の場合 -- Show double byte spaces vim.cmd[[ hi DoubleByteSpace term=underline ctermbg=blue guibg=darkgray match DoubleByteSpace /　/ ]] 参考 制御文字（改行、タブ文字、行末のスペースなど）を表示する (list, listchars)</description></item><item><title>Vim の検索に関する設定 (ignorecase, smartcase, wrapscan, hlsearch, incsearch)</title><link>https://maku77.github.io/p/v4cuc9g/</link><pubDate>Thu, 29 Jan 2009 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/v4cuc9g/</guid><description>大文字・小文字の区別 (ignorecase) /{pattern} によるカレントファイル内の検索や、:vimgrep による grep 検索では、デフォルトでは大文字・小文字を区別 してパターンマッチングが行われます。 ignorecase オプションを設定すると、大文字・小文字を区別せずに検索できるようになります。
:set ignorecase &amp;#34;大文字・小文字を区別しないで検索 :set noignorecase &amp;#34;大文字・小文字を区別して検索 (default) ignorecase に加えて smartcase オプションを設定すると、検索パターンに大文字を含むときだけ大文字・小文字を区別して検索できるようになります。オススメです。
:set ignorecase smartcase &amp;#34; 検索パターンに大文字を含むときだけ大文字・小文字を区別して検索 ファイル末尾まで検索したら先頭から検索 (wrapscan) n キーを連打して検索パターンにヒットした箇所に次々とジャンプしていくとき、デフォルトでは最後にヒットした文字列まで到達すると、次はファイルの先頭に戻って検索されます。 nowrapscan オプションを設定しておくと、ファイルの末尾でカーソルのジャンプが停止します（下まで検索しましたが該当箇所はありません と表示されます）。
:set wrapscan &amp;#34;折り返し検索 ON (default) :set nowrapscan &amp;#34;折り返し検索 OFF 検索結果のハイライト (hlsearch) hlsearch オプションがセットされた状態で検索を行うと、検索にヒットした部分がすべてハイライト表示されるようになります。
:set hlsearch &amp;#34;検索結果のハイライト ON :set nohlsearch &amp;#34;検索結果のハイライト OFF (default) hlsearch オプションを設定していると、検索結果のハイライト表示が出っぱなしになって邪魔になることがあります。 その場合は、次のコマンドを実行してハイライト表示を消すことができます。
検索結果のハイライトをクリア :nohl &amp;#34; nohlsearch の省略形 オプション名とコマンド名が nohlsearch で同じなので混同しないようにしてください。
インクリメンタル・サーチを有効にする (incsearch) incsearch オプションがセットされた状態で検索を行うと、検索パターンを 1 文字入力するたびに検索結果がリアルタイムに表示されるようになります。 このインクリメンタル・サーチは便利ですが、パターン入力中にカーソル位置がジャンプしてしまうので、慣れるまで戸惑うことがあります。</description></item><item><title>Vim のアンドゥ操作とリドゥ操作 (u, Ctrl-r, undolevels)</title><link>https://maku77.github.io/p/rihibef/</link><pubDate>Thu, 13 Nov 2008 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/rihibef/</guid><description>アンドゥ／リドゥの操作方法 Vim でアンドゥ (Undo) 操作、リドゥ (Redo) 操作を行うには、下記のコマンドを使用します。
u &amp;hellip; アンドゥ Ctrl-r &amp;hellip; リドゥ（アンドゥによって取り消された操作を復旧） アンドゥ回数の設定 アンドゥ操作のレベル（制限回数）を変更するには undolevels オプションを設定します。
:set undolevels=300 Linux や Windows では、undolevels の規定値は 1000 なので、通常は変更する必要はないでしょう。</description></item><item><title>Vim/NeoVim で GUI モード用のフォントを設定する (guifont)</title><link>https://maku77.github.io/p/e3xdbxe/</link><pubDate>Mon, 12 May 2008 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/e3xdbxe/</guid><description>フォント設定ダイアログを開く nvim-qt や gVim などの GUI モードで動作する Vim/NeoVim 環境では、次のようにフォント設定ダイアログを開くことができます。
:set guifont=* ターミナル上で vim や nvim を動かしているときは、そのターミナルで設定されているフォントがそのまま使われるので、この設定は必要ありません。
ダイアログでフォントの設定を行った後は、
set guifont? として guifont オプションに具体的にどのような設定値が格納されているかを確認することができます。 この設定値を、設定ファイルに記述しておけば、次回の起動時からは自動的にそのフォント設定が反映されます。
設定ファイルでフォントを指定する NeoVim (nvim-qt) の場合 GUI モードの NeoVim（nvim-qt など）のフォントを設定するには、コマンドラインモードでの :set guifont=Consolas:h14 に相当する下記のようなコードを実行すれば OK です。
NeoVim (~/.config/nvim/init.lua) の場合 vim.o.guifont = &amp;#34;Consolas:h14&amp;#34; 現在の環境が GUI モードで動作しているかどうかを調べるには、vim.fn.has('gun_running') の値が 1 かどうかをチェックします。 下記は、HackGen フォントを使用するように設定した例です。
NeoVim (~/.config/nvim/init.lua) の場合 -- -- GUI モード（nvim-qt など）のフォント設定 -- -- 白源フォント (HackGen Console NF) を下記からダウンロードしておく。 -- Nerd Fonts が組み込まれているのでリッチな UI 表示に使える。 -- https://github.</description></item><item><title>Vim のビジュアルモードの基本 (v, Shift-v, Ctrl-v)</title><link>https://maku77.github.io/p/iumn4xs/</link><pubDate>Tue, 15 Jan 2008 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/iumn4xs/</guid><description>ビジュアルモードの開始・終了 ビジュアルモードは、Vim においてテキストの範囲選択を行うためのモードです。 ノーマルモードで下記のようなコマンドを入力することでビジュアルモードに入ることができます。
入力 説明 v ビジュアルモード（文字単位） Shift-v ビジュアルラインモード（行単位） Ctrl-v ビジュアルブロックモード（矩形） ビジュアルモードを抜けてノーマルモードに戻るには、Esc を押すか、何かコマンドを実行します（d で削除するなど）。 コマンドを実行した場合は、選択した範囲に対してコマンドが適用されます。
ビジュアルモードの選択範囲を拡張する カーソル移動で拡張する ビジュアルモードに入った後で o を入力することで、カーソル位置を選択領域の先頭、末尾へ交互に移動することができます。 この状態でカーソルを動かすと、選択領域を自在に伸縮させることができます。
ルールに応じて拡張する ビジュアルモードに入った後で、下記のような操作を行うと、ルールに従って選択範囲を拡張することができます。
入力 説明 ip カーソル位置の段落全体を選択 ap カーソル位置の段落全体を選択（後続の空行も含めて選択） iw カーソル位置の単語全体を選択 aw カーソル位置の単語全体を選択（後続のスペースも含めて選択） i( 括弧 () に囲まれた領域を選択 a( 括弧 () に囲まれた領域を選択（括弧も含めて選択） i{ 括弧 {} に囲まれた領域を選択 a{ 括弧 {} に囲まれた領域を選択（括弧も含めて選択） i[ 括弧 [] に囲まれた領域を選択 a[ 括弧 [] に囲まれた領域を選択（括弧も含めて選択） i&amp;lt; 括弧 &amp;lt;&amp;gt; に囲まれた領域を選択 a&amp;lt; 括弧 &amp;lt;&amp;gt; に囲まれた領域を選択（括弧を含めて選択） 例えば、ビジュアルモードで段落全体（空行で区切られた連続する行）を一気に選択するには、その段落内にカーソルがある状態で ip と入力します。 ノーマルモードから段落全体を選択状態にするには vip と入力すればよいことになります（上のデモアニメを参照）。 「段落選択はビップ」と覚えます。</description></item><item><title>Vim/NeoVim で設定ファイル (.vimrc) を開く、リロードする</title><link>https://maku77.github.io/p/zneoq8d/</link><pubDate>Wed, 26 Dec 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/zneoq8d/</guid><description>設定ファイルを開く NeoVim の場合 NeoVim の設定ファイル (init.lua or init.vim) を開くには次のようにします。
NeoVim の設定ファイルを開く（OS に依存しない方法） :e $MYVIMRC NeoVim は、設定ファイルとして init.lua と init.vim のどちらかを使うことができます（init.lua が優先されます）。 実際に読み込まれた設定ファイルのパスが $MYVIMRC に格納されるので、上記のように設定ファイルを開くことができます（:echo $MYVIMRC でパスを確認できます）。
明示的に init.lua または init.vim を開きたい場合は次のようにします。
NeoVim の設定ファイルを開く（Linux/macOS の場合） :e ~/.config/nvim/init.lua :e ~/.config/nvim/init.vim NeoVim の設定ファイルを開く（Windows の場合） :e %USERPROFILE%\AppData\Local\nvim\init.lua :e %USERPROFILE%\AppData\Local\nvim\init.vim 参考: Vim/NeoVim の設定ファイルのパスを確認する Vim の場合 Vim エディタから設定ファイル（.vimrc や .gvimrc）を開くには、下記のようにします（:e は :edit コマンドの省略系です）。
Vim の設定ファイルを開く（Linux/macOS の場合） :e ~/.vimrc :e ~/.gvimrc Vim の設定ファイルを開く（Windows の場合） :e ~/_vimrc :e ~/_gvimrc 設定ファイルの名前が Linux (.</description></item><item><title>Vim/NeoVim の設定ファイルのパスを確認する ($MYVIMRC)</title><link>https://maku77.github.io/p/7mabuvq/</link><pubDate>Wed, 26 Dec 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/7mabuvq/</guid><description>設定ファイルのパスを調べる Vim や NeoVim の設定ファイル（やディレクトリ）のパスは、:echo コマンドを使って以下のように確認することができます。
Vim の場合: :echo $MYVIMRC
出力例: C:\Users\maku\_vimrc （Windows の場合）
出力例: /Users/maku/.vimrc （Linux/macOS の場合） :echo $MYGVIMRC
出力例: C:\Users\maku\_gvimrc （Windows の場合）
出力例: /User/maku/.gvimrc （Linux/macOS の場合） NeoVim の場合（init.lua と init.vim のうち実際に読み込まれたファイルのパス）: :echo $MYVIMRC or :=vim.env.MYVIMRC
出力例: C:\Users\maku\AppData\Local\nvim\init.lua （Windows の場合）
出力例: /Users/maku/.config/nvim/init.lua （Linux/macOS の場合） また、nvim ディレクトリのパスは、以下のように確認できます。
:echo stdpath('config')
出力例: C:\Users\maku\AppData\Local\nvim （Windows の場合）
出力例: /Users/maku/.config/nvim （Linux/macOS の場合） デフォルトのパス デフォルトでは、次のようなファイルパスに置かれた設定ファイルが読み込まれます。
Vim の場合 Windows の場合: %USERPROFILE%/_vimrc （ただし HOME 環境変数が設定されている場合は %HOME%/_vimrc） Linux/macOS の場合: ~/.</description></item><item><title>Vim で C/C++ の変数／マクロの定義位置にジャンプする</title><link>https://maku77.github.io/p/96itrdp/</link><pubDate>Wed, 21 Nov 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/96itrdp/</guid><description>C/C++ の変数／マクロの定義位置にジャンプ 変数にカーソルを当てた状態で、以下のように入力すると、その変数の定義位置にジャンプすることができます。
コマンド 説明 gd ローカル変数の定義位置へジャンプ gD グローバル変数の定義位置へジャンプ 検索の精度はあまり高くありません。。。
C/C++ のマクロの定義を表示／定義位置へジャンプ C/C++ のマクロは次のような感じで定義されます。
#define BUF_SIZE 256 マクロを使用している場所から、そのマクロの定義（上記のコード）を調べるには、マクロ名にカーソルを当てた状態で次のように入力します。 #include されているファイルの内容も検索してくれます。
コマンド 説明 [D マクロの定義を表示（すべての定義を表示） [d マクロの定義を表示（最初の定義のみ） [Ctrl-d マクロの定義位置へジャンプ</description></item><item><title>Vim でカーソル位置の単語に対して任意のコマンド（ヘルプなど）を実行する (keywordprg)</title><link>https://maku77.github.io/p/3hp29j9/</link><pubDate>Wed, 21 Nov 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/3hp29j9/</guid><description>Vim で任意のキーワードにカーソルを合わせた状態で SHIFT-K と入力すると、そのキーワードをパラメータにして、keywordprg オプションに設定されたコマンドが実行されます。 keywordprg の初期値は以下のようになっています。
keywordprg オプションのデフォルト値 set keywordprg=man &amp;#34; Unix の場合 set keywordprg=:help &amp;#34; Windows の場合 つまり、Unix の場合は、SHIFT-K と入力するだけでカーソル位置にあるキーワードの man ページを参照することができます。 man ページのセクション番号を指定するには、2 SHIFT-K のように、先にセクション番号を入力します。
どの文字をキーワードとみなすかは、iskeyword オプションに文字コードで設定します。 iskeyword のデフォルト値は下記のような感じになっています。
iskeyword オプションのデフォルト値 set iskeyword=@,48-57,_,128-167,224-235</description></item><item><title>Vim/NeoVim で自動インデントモードを有効にする (autoindent, smartindent, cindent)</title><link>https://maku77.github.io/p/oe94dkh/</link><pubDate>Fri, 16 Nov 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/oe94dkh/</guid><description>3 種類のインデントモードの設定 Vim には、大きく分けて、以下のようなオートインデント設定があります。
autoindent カレント行のインデントをキープする。シンプル。 smartindent C言語風のプログラミング言語向けの自動インデント。 cindent C言語に特化したインデント（smartindent よりも厳密に文法を考慮） autoindent を有効／無効にする :set autoindent &amp;#34; autoindent を ON :set noautoindent &amp;#34; autoindent を OFF :set autoindent? &amp;#34; autoindent の設定を確認 (autoindent or noautoindent) autoindent の設定を有効にすると、新しい行を追加したときに、前の行のインデントが引き継がれるようになります。 ただそれだけのシンプルなインデントモードです。 新しい行の追加は例えば、以下のような入力があった場合が対象になります。
o コマンド（あるいは O コマンド） インサートモード時の Enter インサートモードのまま、インデントの量を変えるには CTRL-T、CTRL-D などのコマンドを使用します。 下記は、:help index からのキーマップ説明の抜粋です。
i_CTRL-T: 現在の行に shiftwidth 分のインデントを挿入する。 i_CTRL-D: 現在の行から shiftwidth 分のインデントを削除する。 smartindent を有効／無効にする :set smartindent &amp;#34; smartindent を ON :set nosmartindent &amp;#34; smartindent を OFF :set smartindent?</description></item><item><title>Vim でカーソル位置にマークしてジャンプしてこれるようにする</title><link>https://maku77.github.io/p/i3ao6oc/</link><pubDate>Sun, 07 Oct 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/i3ao6oc/</guid><description>Vim のマーク機能を使用すると、カーソル位置に a～z、あるいは A～Z のマークを付け、別の場所からそこへジャンプして来ることができるようになります。
マークを付ける m に続けて、1 文字のアルファベットを入力すると、現在のカーソル位置にマークを設定することができます。
入力 説明 ma カーソル位置をローカルマーク a として保存（a～z を使用可能） mA カーソル位置をグローバルマーク A として保存（A～Z を使用可能） マーク用のアルファベットとして 小文字の a～z を使用すると、カレントバッファのみに有効なローカルマーク として設定されます。 大文字の A～Z を使用すると、グローバルマーク（ファイルマーク） として設定されます。 ローカルマークはファイルごとに a～z を使用することができ、グローバルマークは全体で A～Z を共有することになります。
マークを設定した位置へジャンプする 入力 説明 `a ローカルマーク a へジャンプ 'a ローカルマーク a の行頭へジャンプ `A グローバルマーク A へジャンプ 'A グローバルマーク A の行頭へジャンプ ローカルマーク (a～z) を指定してジャンプするときは、カレントバッファで開いているファイルに設定されたローカルマークがジャンプ先のターゲットとなります。
一方、グローバルマーク (A～Z) は、マークしたファイルまで一緒に記録されており、Vim でどのファイルを編集中であっても、そのファイルにジャンプすることができます。 頻繁に使用するファイルに mA でグローバルマークを設定しておけば、'A でそのファイルをいつでも簡単に開けるようになります。
また、ジャンプ元とジャンプ先で行ったり来たりするために、下記のようなジャンプコマンドを使用することができます。
入力 説明 `` バッファ内のジャンプ元へジャンプ '' バッファ内のジャンプ元の行頭へジャンプ マークの一覧を表示する 現在設定されているローカルマークとグローバルマークの一覧を表示するには、次のコマンドを実行します。</description></item><item><title>Vim でウィンドウを分割する</title><link>https://maku77.github.io/p/ym9pa88/</link><pubDate>Fri, 05 Oct 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ym9pa88/</guid><description>Vim のウィンドウを分割すると、複数のファイルの内容を同時に表示しながら作業することができます。 同一ファイル内の 2 か所を表示することもできます。
ウィンドウを分割する 入力 説明 :sp[lit] 上下に分割（編集中のファイルを開く）。Ctrl-w s としても OK :vs[plit] 左右に分割（編集中のファイルを開く）。Ctrl-w v としても OK :new 上下に分割（空のファイルを開く）。Ctrl-w n としても OK :vnew 左右に分割（空のファイルを開く） :sview [file] 閲覧用にファイルを開く。:split → :view としても OK ウィンドウを閉じる 入力 説明 Ctrl-w q ウィンドウを閉じる。最後のウィンドウであれば Vim を終了 (= :quit) Ctrl-w c ウィンドウを閉じる。最後のウィンドウを閉じることはできない (= :close) Ctrl-w o カレントウィンドウ以外を閉じる ウィンドウを切り替える 入力 説明 Ctrl-w w 次のウィンドウへ移動（★最低限これだけ覚えておく） Ctrl-w h 左のウィンドウへ移動 Ctrl-w j 下のウィンドウへ移動 Ctrl-w k 上のウィンドウへ移動 Ctrl-w l 右のウィンドウへ移動 キーシーケンスの 2 番目のキーは、Ctrl キーを押しながら入力することもできるようになっています。 例えば、Ctrl-w w と入力する代わりに、Ctrl-w Ctrl-w と入力しても OK です。</description></item><item><title>Vim でファイル名を指定してファイルを開く (:e, :edit, :view)</title><link>https://maku77.github.io/p/6aycfga/</link><pubDate>Fri, 05 Oct 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/6aycfga/</guid><description>ファイル名を指定してファイルを開く Vim で :edit コマンド（:e と省略可）を使用すると、指定した名前のファイルをカレントバッファで開くことができます。
hoge.txt を開く :e hoge.txt :edit hoge.txt 別のファイルを開く前に、カレントバッファで開いているファイルの編集内容を :w で保存しておく必要があります。 現在の編集を破棄して別のファイルを開きたい場合は、コマンドの後ろに ! を付けて実行します。
:e! hoge.txt :edit! hoge.txt 読み取り専用でファイルを開く :edit コマンドの代わりに、:view コマンドを使用してファイルを開くと、読み取り専用（ReadOnly モード）でファイルを開くことができます。
:view hoge.txt ファイルを開くときは :e コマンドで代用してしまうことが多いので、:view コマンドを使用することはあまりないかもしれません。
☝️ ワンポイント :edit コマンドは :e と 1 文字まで省略することができますが、:view コマンドは :vie までしか省略できません。 詳しくは、:help :view&amp;lt; でヘルプを確認してみてください。</description></item><item><title>Vim/NeoVim でタブ文字に関する設定を行う (tabstop, expandtab, softtabstop)</title><link>https://maku77.github.io/p/8okf7d3/</link><pubDate>Wed, 11 Apr 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/8okf7d3/</guid><description>タブ文字 1 文字分の表示幅を設定する タブ文字がどれくらいの幅で表示されるかの設定は tabstop オプションで行います。
Vim (~/.vimrc) の場合 :set tabstop=4 &amp;#34;タブ 1 文字の表示幅 (default: 8) NeoVim (~/.config/nvim/init.lua) の場合 vim.opt.tabstop = 4 -- タブ 1 文字の表示幅 (default: 8) 例えば、tabstop を 4 に設定すると、ファイル内のタブ文字は 4 文字分のスペースとして表示されます。 この設定は、あくまで見え方の設定であって、タブは 1 文字のタブ文字 (\t) として存在します。 他のエディタでファイルを開くと、タブ文字の見え方は変わってきます。
タブを入力したときにタブ文字の代わりにスペースを挿入する TAB キーを押したときに、タブ文字の代わりに半角スペース x N を入力したいときは、expandtab を有効化します。 さらに、TAB キーを押したときに何文字分の半角スペースを入力するかは、softtabstop で設定します。 softtabstop=4 と具体的な値を設定するのもよいですが、負の値（-1 など）を設定すると、tabstop で設定した値に合わせてくれます。
Vim (~/.vimrc) の場合 :set expandtab &amp;#34;タブキーでスペースを入力する (default: noexpandtab) :set softtabstop=-1 &amp;#34;タブキーで入力するスペース数 (-1: tabstop に合わせる) NeoVim (~/.config/nvim/init.lua) の場合 vim.</description></item><item><title>Vim のヘルプコマンドの使い方 (:help, :helpgrep)</title><link>https://maku77.github.io/p/fdep5i7/</link><pubDate>Mon, 12 Mar 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/fdep5i7/</guid><description>ヘルプの起動／終了 Vim エディタから下記のコマンドを実行することで、ヘルプを起動・終了することができます。
:help &amp;hellip; ヘルプを起動する :q &amp;hellip; ヘルプを終了する ZZ &amp;hellip; ヘルプを終了する :help コマンドに渡すパラメータ :help コマンドの引数に特定のプレフィックスを付けたり、引数を引用符で囲むことで、異なるモードのコマンドのヘルプを見ることができます。
調べる項目 プレフィックスなど 例 Normal mode のキー入力 なし :help u Insert mode のキー入力 i_ :help i_CTRL-N, :help i_&amp;lt;Esc&amp;gt; Visual mode のキー入力 v_ :help v_u Command mode のキー入力 c_ :help c_&amp;lt;Del&amp;gt; ex コマンド : :help :quit オプション 'name' :help 'number' Vim の起動パラメータ - :help -t 特殊なキー入力は、CTRL-A、&amp;lt;Del&amp;gt;、&amp;lt;Esc&amp;gt; のように表現することができます（他のキーの表現方法は :help keycodes で確認できます）。
例: Ctrl-A（normal mode）のヘルプを表示する :help CTRL-A 例: Ctrl-A（insert mode）のヘルプを表示する :help i_CTRL-A 例: Vim の起動パラメータ -t のヘルプを表示する :help -t 例: number オプションのヘルプを見る :help &amp;#39;number&amp;#39; ヘルプファイルを grep する :helpgrep コマンドを使用すると、ヘルプファイル内を grep 検索することができます。</description></item><item><title>Vim のコマンドモードでのカーソル移動 (Ctrl-B, Ctrl-E, Ctrl-H, Ctrl-U)</title><link>https://maku77.github.io/p/f92ub3d/</link><pubDate>Thu, 22 Feb 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/f92ub3d/</guid><description>コマンドモードでの入力操作 Vim で :（ex コマンド）や、/ （検索）キーを押すと、コマンドを 1 行だけ入力できるコマンドラインモード（コマンドモード）に入ります。 コマンドモードでは、下記のようなキーシーケンスでカーソル移動や編集操作を行うことができます。
入力 説明 Ctrl-U 行頭まで削除 Ctrl-B 行頭に移動 Ctrl-E 行末に移動 Ctrl-H 1 文字削除 Ctrl-W 1 単号削除 Ctrl-P 1 つ前の履歴を表示 Ctrl-N 1 つ後の履歴を表示 Ctrl-R % ファイル名を挿入（% レジスタ） Ctrl-R * クリップボードの内容を挿入（* レジスタ） Ctrl-R &amp;quot; 最後にヤンクした内容を挿入（&amp;quot; レジスタ） コマンドモードのヘルプ コマンドモードでの入力操作に使えるキーシーケンスのヘルプは次のように確認できます。
入力 説明 :help cmdline-editing コマンドラインの編集操作についてのヘルプ全般 :help c_CTRL-W コマンドモードでの Ctrl-W というキー入力についてのヘルプ :help map-modes キーマッピングについてのヘルプ（コマンドモード用には :cmap や :cnoremap を使う）</description></item><item><title>Vim のコマンドモードで入力補完する (Ctrl-D, Tab)</title><link>https://maku77.github.io/p/ow6rvbz/</link><pubDate>Wed, 21 Feb 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ow6rvbz/</guid><description>Vim のコマンドモードでコマンドを入力している最中に、Ctrl-D や Tab を押すと、入力候補の一覧表示や、入力の補完を行うことができます。
例: add を含んでいるパラメータの入力候補を表示 :help add&amp;lt;Ctrl-D&amp;gt; 例: add で始まるパラメータの入力を補完 :help add&amp;lt;TAB&amp;gt;</description></item><item><title>Vim/NeoVim でインデント（シフトコマンド）を設定する (shiftwidth, shiftround)</title><link>https://maku77.github.io/p/b5o6ksu/</link><pubDate>Tue, 20 Feb 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/b5o6ksu/</guid><description>シフトコマンドで挿入／削除するスペースの量を設定する shiftwidth オプションに設定した値は、&amp;gt;&amp;gt; コマンドなどで行頭に挿入するスペースの数を示します。
:set shiftwidth=4 &amp;#34; デフォルトは 8 タブストップ (tabstop) と混同しがちなので注意してください。 タブストップは、タブ文字を入力した場合に表示位置をどこへずらすかの基準を指定します。 シフトコマンド (&amp;gt;&amp;gt;) に効いてくる値はあくまで shiftwidth の方です。
シフトしたときに shiftwidth の値の倍数になるようにスペースを挿入する シフトコマンド（&amp;gt;&amp;gt; など）を実行すると、行の先頭に shiftwidth で設定した数だけスペースが挿入されます。 このとき、すでに行頭に何文字かのスペースが存在する場合に、スペース数が shiftwidth の倍数になるように調整してスペースを挿入したい場合は、次のように shiftround を有効化します（デフォルトはオフ (noshiftround) です）。
Vim（/.vimrc の場合） :set shiftround &amp;#34;シフトコマンドでのインデント量を丸める NeoVim（~/.config/nvim/init.lua の場合） vim.opt.shiftround = true -- シフトコマンドでのインデント量を丸める ほとんどの場合は、行頭からのインデント量は 2 の倍数とか 4 の倍数とかに揃えておきたいはずなので、shiftround はセットしておくことをお勧めします。
参考 自動インデントモードを有効にする (autoindent, smartindent, cindent) インデント用のスペースを入力する（シフトコマンド） (&amp;gt;&amp;gt;, &amp;lt;&amp;lt;, Ctrl-T, Ctrl-D)</description></item><item><title>Vim/NeoVim でインデント用のスペースを入力する（シフトコマンド）</title><link>https://maku77.github.io/p/i2m4nqt/</link><pubDate>Tue, 20 Feb 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/i2m4nqt/</guid><description>Vim にはインデント用のスペースを簡単に入力するためのシフトコマンドが用意されています。 現在のモードによって下記のように入力します。
コマンドモードのとき &amp;gt;&amp;gt; &amp;hellip; 右へ 1 レベルシフト &amp;lt;&amp;lt; &amp;hellip; 左へ 1 レベルシフト 入力モードのとき Ctrl-T &amp;hellip; 右へ 1 レベルシフト Ctrl-D &amp;hellip; 左へ 1 レベルシフト 0 Ctrl-D &amp;hellip; すべてのインデントを取り除く（いったん 0 が表示されますが、次の Ctrl-D で消えます） 参考 インデント（シフトコマンド）を設定する (shiftwidth, shiftround) 自動インデントモードを有効にする (autoindent, smartindent, cindent) ビジュアルモードで簡単にインデントを行えるようにする</description></item><item><title>Vim の ex コマンドでの行範囲指定方法いろいろ</title><link>https://maku77.github.io/p/fw7q8q7/</link><pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/fw7q8q7/</guid><description>行範囲指定の基本 Vim の ex コマンドは、: から始めるコマンドモードのことで、各コマンドの先頭には、コマンドをどの行に対して実行するかを示す、行範囲 を指定することができます。
:行範囲 コマンド 行範囲を省略した場合は、コマンドはカレント行にだけ影響を及ぼします。 行範囲に .（ドット）を指定した場合も、同様にカレント行に対してだけ実行されます。
例: カレント行を削除 :d 例: 123 行目を削除 :123 d 例: 10 行目から 20 行目をソート :10,20 sort 行範囲指定の例 行番号ベースで指定する方法 :% &amp;lt;command&amp;gt; &amp;#34; ファイル全体に対して command を実行 :3 &amp;lt;command&amp;gt; &amp;#34; 3 行目に対して command を実行 :3,5 &amp;lt;command&amp;gt; &amp;#34; 3 行目から 5 行目までに対して command を実行 :3,$ &amp;lt;command&amp;gt; &amp;#34; 3 行目から最後の行までに対して command を実行 :. &amp;lt;command&amp;gt; &amp;#34; カレント行に対して command を実行（省略した場合と同様） :.,5 &amp;lt;command&amp;gt; &amp;#34; カレント行から 5 行目までに対して command を実行 :.</description></item><item><title>Vim のカーソル移動方法まとめ</title><link>https://maku77.github.io/p/etvrhdd/</link><pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/etvrhdd/</guid><description>カーソル移動（左右） 入力 説明 h 1 文字左へ l 1 文字右へ 0 行頭へ $ 行末へ 5| カレント行の 5 文字目へ ^ 最初の表示可能な文字へ カーソル移動（行番号指定でジャンプ） 入力 説明 gg
:1 1 行目へジャンプ 10gg
10G
:10 10 行目へジャンプ G
:$ 最終行へジャンプ :$-3 最終行より 3 行上へジャンプ :+10 カレント行から 10 行下へジャンプ 応用例: カーソル位置からファイルの最後までを削除 dG カーソル移動（画面内でジャンプ） 入力 説明 H 画面内の一番上にジャンプ（ホーム行） M 画面内の中央行にジャンプ L 画面内の一番下にジャンプ 3H 画面内の一番上から 3 行目にジャンプ 3L 画面内の一番下から 3 行目にジャンプ カーソル移動（ブロック単位でジャンプ） 入力 説明 w 次の単語の先頭へ W 次の単語の先頭へ（後続する記号も単語の一部とみなす） b 前の単語の先頭へ B 前の単語の先頭へ（後続する記号も単語の一部とみなす） e 単語の末尾へ E 単語の末尾へ（後続する記号も単語の一部とみなす） ( 現在の文の先頭へ ) 次の文の先頭へ { 現在の段落の先頭へ（空行で判断） } 次の段落の先頭へ（空行で判断） [[ 現在のセクションの先頭へ（行頭にある { を検索） ]] 次のセクションの先頭へ（行頭にある { を検索） w や b によるカーソル移動時に、どこまでを単語の切れ目と見なすかは、iskeyword オプションによって設定されています。 現在の設定値を見るには次のようにします。</description></item><item><title>Vim の画面スクロール方法まとめ</title><link>https://maku77.github.io/p/gu9om5z/</link><pubDate>Tue, 30 Jan 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/gu9om5z/</guid><description>画面スクロール操作 画面スクロール コマンド 説明 Ctrl-f 1 画面下へスクロール Ctrl-b 1 画面上へスクロール Ctrl-d 半画面下へスクロール、あるいは scroll オプションで指定された行数だけ下へスクロール Ctrl-u 半画面上へスクロール、あるいは scroll オプションで指定された行数だけ上へスクロール 表示位置を移動 下記の操作では、カーソル位置（行）をキープしたまま、画面の表示位置だけを移動させます。
コマンド 説明 z&amp;lt;CR&amp;gt; カレント行を画面上端へ ※1 zz カレント行を画面中央へ z. カレント行を画面中央へ（カーソルを最初の非空白文字へ） zb カレント行を画面下端へ z- カレント行を画面下端へ（カーソルを最初の非空白文字へ） z+ 画面下端を画面上端へ（これ使い道ある？） Ctrl-y 1 行下へスクロール Ctrl-e 1 行上へスクロール ※1 例えば、ソースコードの関数名を定義している行で、z [Enter] とすれば、その関数の定義が画面上端から表示されます。 z コマンドは、scrolloff オプションに 0 以外が設定されていると、その値によって移動後の表示位置が少々変わります。
z コマンドを実行するときに数値プレフィックスを付けると、カレント行とみなす行番号を指定することができます。
例: 30 行目が画面上端に表示されるように移動 30z[Enter] 画面スクロール量の設定 (scroll) Ctrl-d や Ctrl-u による画面スクロール行数は、scroll オプションで設定できます。
:set scroll=3 scroll オプションのデフォルトは 0 になっており、この場合だけは「画面に表示されている行数の半分だけスクロールする」という特殊な動きをします。 個人的には、一度に画面半分もスクロールされると脳がついていけないので、3 行くらいのスクロールに変更しておくことをオススメします。</description></item><item><title>Vim の文字の置換方法まとめ (:s, :substitute)</title><link>https://maku77.github.io/p/f8v2npx/</link><pubDate>Mon, 08 Jan 2007 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/f8v2npx/</guid><description>Vim の s (substitute) コマンドを使用すると、ファイル内の任意の範囲のテキストをまとめて置換することができます。
substitute コマンドの基本 substitute コマンドは、ノーマルモード中に下記のように入力して実行します。
:&amp;lt;行範囲&amp;gt; s/&amp;lt;置換前パターン&amp;gt;/&amp;lt;置換後パターン&amp;gt;/&amp;lt;フラグ&amp;gt; 指定した &amp;lt;行範囲&amp;gt; のテキストの中で、&amp;lt;置換前パターン&amp;gt; に一致する文字列を &amp;lt;置換後パターン&amp;gt; に置換します。 substitute コマンドは通常、上記のように省略系の s を使って実行します。
デフォルトでは、行内で最初に見つかった文字列だけを置換しますが、&amp;lt;フラグ&amp;gt; 部分に g（global フラグ）を指定することで、行内のすべての文字列を置換することができます。
:s/old/new/ &amp;#34;カレント行の文字列を置換（1 つだけ置換） :s/old/new/g &amp;#34;カレント行の文字列を置換（すべて置換） 上記のように &amp;lt;行範囲&amp;gt; の指定を省略した場合は、カレント行のみが置換対象になりますが、そのような使い方はまれでしょう。 ファイル内の全ての行を置換対象にしたい場合は、&amp;lt;行範囲&amp;gt; として % を指定します（1,$ としても同様）。 下記の例では、% の後ろにスペースを入れていますが、このスペースは省略することができます。
:% s/old/new/g &amp;#34;ファイル全体の文字列を置換 置換対象とする行範囲を指定したい時は、下記のように明示的に 開始行,終了行 を指定することもできますし、
:1,5 s/old/new/g &amp;#34;1～5行目までを置換対象にする :5,$ s/old/new/g &amp;#34;5行目～最終行までを置換対象にする Shift-V で行選択した状態から、:s/old/new/g と続けて実行することもできます（こちらの方法がオススメ）。 行選択した状態で : をタイプすると、コマンドの入力欄には下記のように表示されますが、これは行選した択範囲を操作対象としていることを示しています。 そのまま s/old/new/g と続けて入力すれば OK です。
:&amp;#39;&amp;lt;,&amp;#39;&amp;gt; 区切り文字にスラッシュ (/) 以外を使用する :s/old/new/g という置換コマンド自体がスラッシュを含んでいるため、置換対象の文字列にスラッシュが含まれる場合は、下記のようにバックスラッシュを使ったエスケープ処理が必要です（/ ではなく \/ と入力する）。</description></item><item><title>Vim/NeoVim を起動するときに行番号や検索パターンを指定してファイルを開く (+n)</title><link>https://maku77.github.io/p/x8f9e87/</link><pubDate>Tue, 12 Dec 2006 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/x8f9e87/</guid><description>行番号を指定してファイルを開く Vim (NeoVim) を起動するときに、+数値 オプションを指定すると、カーソルの初期フォーカス行を指定してファイルを開くことができます。 数値を省略して + のみを指定すると、最終行に移動します。
$ vim +100 filename # ファイルを開いて 100 行目へ移動 $ vim + filename # ファイルを開いて最終行へ移動 検索パターンを指定してファイルを開く Vim (NeoVim) を起動するときに、__+/パターン オプションを指定すると、指定した正規表現に一致する文字列を含んだ行をフォーカスした状態でファイルを開くことができます。
$ vim +/pattern filename # ファイルを開いて pattern にヒットする行へ移動 このオプションを指定してファイルを開くと、/ コマンドで検索された状態でファイルが開くので、続けて n キーを押すことで次のヒット位置に移動できます。</description></item><item><title>Vim でカレントファイル内の文字列を検索する (/, ?, *, #)</title><link>https://maku77.github.io/p/u4gw7c3/</link><pubDate>Wed, 06 Dec 2006 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/u4gw7c3/</guid><description>検索の基本 Vim でカレントファイル内の文字列を検索するには、次のような検索コマンドを使用します。
入力 説明 /pattern [Enter] パターンを検索（順方向） ?pattern [Enter] パターンを検索（逆方向） n 次の一致箇所にジャンプ N 前の一致箇所にジャンプ / [Enter] 同じパターンで再検索（順方向） ? [Enter] 同じパターンで再検索（逆方向） * カーソル下の単語を後方検索（g* で部分一致検索） # カーソル下の単語を前方検索（g# で部分一致検索） パターンによる検索 (/, ?) 検索パターンでは正規表現を使用できます。
例: void で始まる行を検索 ^ /^void &amp;#34; ^ は行頭に一致 例: 0 回以上の繰り返しに一致 * /te* &amp;#34; t, te, tee などに一致 例: 1 回以上の繰り返しに一致 \&amp;#43; /te\+ &amp;#34; te, tee, teee などに一致 例: 0 回あるいは 1 回に一致 \= /te\= &amp;#34; t あるいは te に一致 例: 任意のアルファベット (A-Za-z) に 1 文字だけ一致 \a /\a\a\a &amp;#34; 任意の 3 文字のアルファベットに一致 例: 任意の数字に 1 文字だけ一致 \d /\d\d\d &amp;#34; 任意の 3 桁の数字に一致 例: いずれかの文字に一致 [.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on 天才まくまくノート</title><link>https://maku77.github.io/hugo/</link><description>Recent content in Hugo on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 13 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo でショートコードが使われている場合のみ JavaScript を読み込む (.HasShortcode)</title><link>https://maku77.github.io/p/3j6qate/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/3j6qate/</guid><description>.HasShortcode 関数 外部の JavaScript ファイルを利用して動作するショートコードを作成すると、Web サイトの表現力を大きく向上させることができます。 例えば、次のようなショートコードが考えられます。
独自の構文でコードを記述すると UML 図を出力してくれる mermaid ショートコード（mermaid.js などを利用） TeX 構文でコードを記述すると数式を出力してくれる math ショートコード（MathJax.js などを利用） このとき悩ましいのが、どのようにして次のような script 要素を出力するかです。
&amp;lt;script src=&amp;#34;for-shortcode.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; すべてのページにこのようなコードを出力してしまうと、この JavaScript が必要ないページでもファイルの読み込みが発生してしまいます。 こういった拡張が増えてくると、大量の JavaScript ファイルが読み込まれることになり、重い Web サイトになってしまいます。
このような場合の救世主が Page.HasShortcode 関数です。
参考: Hugo - Create Your Own Shortcodes - Checking for Existence ページテンプレート内で、
{{ if .HasShortcode &amp;#34;my-shortcode&amp;#34; }} ... {{ end }} といった記述をしておくと、Markdown ファイル内で my-shortcode ショートコードを使用している場合のみ出力を行うことができます。
実装例 例えば、ベーステンプレートの body 要素の末尾に次のように記述しておけば、Markdown ファイル内で mermaid ショートコードを使用している場合のみ、mermaid.js の読み込みと初期化処理を実行することができます。
layouts/_default/baseof.html（抜粋） ... {{- if .</description></item><item><title>mermaid.js で Hugo の Markdown 記事に UML 図を埋め込む</title><link>https://maku77.github.io/p/xg3n7qa/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/xg3n7qa/</guid><description>mermaid.js とは mermaid.js を使うと、独自構文のテキストから UML 図などを生成することができます。 JavaScript で動的に SVG を生成することができるので、Markdown ファイルに図を埋め込みたい場合によく使われています。
Azure DevOps Wiki や GitHub、Gitlab などでも標準サポートされており、Markdown で図を扱うときのデファクトスタンダードになるかもしれません。 UML 図の表現力という点では PlantUML の方が上ですが、そのあたりは改善されていくと思います。
Hugo は現時点 (v0.76.4) では、mermaid.js を標準サポートしていないので、ここでは Hugo に mermaid.js を組み込む方法を説明します。
mermaid.js の仕組み mermaid.js は、次のような mermaid クラスが付けられた HTML 要素の内容を読み取り、そこに変換後の図 (SVG) を挿入します。 この例の場合は、div 要素の内容が SVG に置き換わります。
&amp;lt;div class=&amp;#34;mermaid&amp;#34;&amp;gt; graph LR A --- B B--&amp;gt;C[あいうえお] B--&amp;gt;D(かきくけこ) &amp;lt;/div&amp;gt; HTML の body 要素の末尾あたりで、次のように mermaid.js の読み込みと初期化を行います。
... &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;mermaid.initialize({startOnLoad: true});&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; これだけで、Web ブラウザでページを開いたときに、SVG に変換された図が表示されます。</description></item><item><title>ショートコードをエスケープ処理してそのまま表示する</title><link>https://maku77.github.io/p/9tg2m7q/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/9tg2m7q/</guid><description>Hugo で作成した記事（.md ファイル）内でショートコードの使い方を説明するときなど、ショートコードのタグそのものを文章中に表示させたいことがあります。 そのまま記述するとショートコードとして処理されてしまうので、次のようにエスケープ処理して記述する必要があります。
Markdown ファイル内での書き方 出力結果 {{&amp;lt;/* my-shortcode */&amp;gt;}} {{&amp;lt; my-shortcode &amp;gt;}} {{%/* my-shortcode */%}} {{% my-shortcode %}} ショートコード名の部分 (my-shortcode) を C/C++ や Java のコメント風に囲めば OK です。 コードブロックの中でも同様にエスケープ処理できます。</description></item><item><title>Hugo でドラフトページの一覧を簡単に確認できるようにする</title><link>https://maku77.github.io/p/qpcvfzi/</link><pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/qpcvfzi/</guid><description>やりたいこと Hugo では、作成途中の記事ページをドラフトとしてマークしておくと、デフォルトで非公開扱いになるので、気軽に記事を書き始めることができます。 ただ、ドラフトページがたくさん溜まってくると、自分が中途半端に書き始めた記事が散らばって分かりにくくなってしまいます。 そこで、ここでは下記のような仕組みを実装して、Hugo のドラフト機能をより便利に使用できるようにします。
図: ドラフト一覧のページへ移動するボタン ドラフトの一覧ページに飛ぶための ドラフト記事一覧ボタン をサイドバー上に表示する（上図） ドラフトの一覧ページでは、最終更新日 や タグ情報 も一緒に表示する 上記は ローカルでの作業中のみ表示する こととする（具体的には hugo server で実行中のみ） ドラフト記事一覧のページにジャンプするボタンを配置する ドラフトページへジャンプするためのボタンは、レイアウトファイルから簡単に配置できるように、パーシャルファイルとして作成します。 個人的に、ローカルでしか有効にしないコードは、下記のように debug ディレクトリの下に入れるようにしています。 そして、全体のコードを if .Site.IsServer の条件で囲むことで、ローカルサーバーで起動しているときのみ出力されるようにしています。
layouts/partials/debug/draft-button.html {{- if .Site.IsServer -}} &amp;lt;style&amp;gt; .xDraftButton { display: block; text-align: center; width: 100%; font-weight: bolder; color: white !important; background: blue; padding: 0.3em 0.5em; border-radius: 0.5em; } &amp;lt;/style&amp;gt; &amp;lt;a href=&amp;#34;/drafts/&amp;#34; class=&amp;#34;xDraftButton&amp;#34;&amp;gt;ドラフト記事一覧&amp;lt;/a&amp;gt; {{- end }} 簡単に言えば、このパーシャルは、https://example.com/drafts/ といった URL へのリンクを出力しているだけです。 上記では style 要素も含めてしまっていますが、みなさんはちゃんと CSS ファイルでスタイル定義するようにしてください。</description></item><item><title>Hugo でソースコードをハイライト表示する (highlight)</title><link>https://maku77.github.io/p/gxk6qat/</link><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/gxk6qat/</guid><description>Pygments によるコードハイライト Hugo の設定ファイル config.toml の中で、下記のように設定しておくと、Pygments によるコードブロックのハイライト機能を有効にすることができます。
pygmentsCodeFences = true 例えば、Java のソースコードであれば、Markdown ファイルの中で、下記のように言語名 java を指定してコードブロックを記述。
```java public class Main { public static void main(String... args) { System.out.println(&amp;#34;Hello&amp;#34;); } } ``` 図: ハイライト表示例 highlight ショートコードによるコードハイライト Hugo の組み込みショートコードとして highlight が用意されています。 このショートコードを使用すると、pyghmentsCodeFences を使う方法よりも高度なコードハイライトを行えます。 例えば、下記のように、行番号を表示したり、特定の行を強調表示することができます。
{{&amp;lt; highlight java &amp;#34;linenos=table, hl_lines=3&amp;#34; &amp;gt;}} public class Main { public static void main(String... args) { System.out.println(&amp;#34;Hello&amp;#34;); } } {{&amp;lt; /highlight &amp;gt;}} 図: ハイライト表示例 色々なオプションが用意されているので、詳しくは下記の Hugo ドキュメントを参照してください。
Hugo - Syntax Highlighting キャプションを付けられる独自のショートコードを作成する ソースコードの表示をキャプション付きでマークアップする場合は、HTML では下記のように figure、figcaption タグを使って記述します。</description></item><item><title>レイアウト用のテンプレートの種類を理解する</title><link>https://maku77.github.io/p/zg4n7q9/</link><pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/zg4n7q9/</guid><description>Hugo では様々なタイプのテンプレートファイルを用意することができ、コンテンツファイルのパスに応じて、どのテンプレートファイルを使ってレンダリングされるかが決定されます。
Hugo のテンプレートファイル Hugo で Web サイトを作成する場合、コンテンツファイルとして Markdown ファイルを作成していきます。 この Markdown ファイルが HTML の形にレンダリングされるとき、テンプレートファイル が使用されます。 Hugo のテンプレートの仕組みを理解することは、Hugo を使いこなすキモとなります。 ここでは、どのような種類のテンプレートファイルが、どのようなコンテンツに対して適用されてレンダリングされるのかを把握しましょう。
ここでは、下記のようなコンテンツ階層があるものとして説明していきます。
コンテンツのディレクトリ階層 content/ +-- _index.md （ホームページ） +-- page1.md （通常のページ） +-- page2.md （通常のページ） +-- section1/ | +-- _index.md （セクションのインデックスページ ＝ セクションページ） | +-- pagel-1.md （通常のページ） | +-- page1-2.md （通常のページ） +-- section2/ +-- _index.md （セクションのインデックスページ ＝ セクションページ） +-- page2-1.md （通常のページ） +-- page2-2.md （通常のページ） ホームページテンプレート (Homepage Template) Homepage Template 最上位の _index.md をレンダリングするときは、ホームページテンプレート が使用されます。</description></item><item><title>Hugo のショートコードの中からフロントマターのパラメータを参照する ($.Page.Params)</title><link>https://maku77.github.io/p/t4sdxi3/</link><pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/t4sdxi3/</guid><description>Hugo のショートコードの中で $.Page.Params を参照すると、コンテンツファイルのフロントマターに記述したパラメータにアクセスすることができます。 下記の hello ショートコードは、コンテンツファイル (.md) のフロントマターに記述された title パラメータと date パラメータの値を表示します。
layouts/shortcodes/title-and-date.html {{ $.Page.Params.title }}&amp;lt;br&amp;gt; {{ $.Page.Params.date | dateFormat &amp;#34;Mon, 02 Jan 2006&amp;#34; }} ☝️ ワンポイント 時刻情報は dateFormat 関数に渡すことで、任意のフォーマットで出力することができます。 パイプで渡すのではなく、関数の第 2 パラメータとして次のように渡すこともできます。
{{ dateFormat &amp;#34;Mon, 02 Jan 2006&amp;#34; $.Page.Params.date }} Go 言語の時刻の扱いに関しては こちらを参照 してください。
作成した title-and-date ショートコードは、コンテンツファイルの中から次のように使用します。
content/page1.md --- title: &amp;#34;ページタイトル&amp;#34; date: &amp;#34;2017-10-02&amp;#34; --- {{&amp;lt; title-and-date &amp;gt;}} 上記のショートコードの部分は、HTML ファイル出力時に次のように展開されます。
Page1 Title&amp;lt;br&amp;gt; Mon, 02 Oct 2017</description></item><item><title>Hugo のショートコードの中から設定ファイルのパラメータを参照する ($.Site.Params)</title><link>https://maku77.github.io/p/53patex/</link><pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/53patex/</guid><description>Hugo のショートコードの中で $.Site.Params を参照すると、設定ファイル (config.toml) の params セクションに記述した情報を取得することができます。 例えば、設定ファイルに下記のように記述されていたとします。
config.toml baseURL = &amp;#34;http://example.org/&amp;#34; languageCode = &amp;#34;ja-jp&amp;#34; title = &amp;#34;わたしのブログ&amp;#34; theme = &amp;#34;my-theme&amp;#34; [params] subtitle = &amp;#34;Hugo を使って日記を書いています&amp;#34; authors = [ &amp;#34;Maku&amp;#34;, &amp;#34;Ponyo&amp;#34; ] 上記の params セクションに記述した設定値は、ショートコードの中から $.Site.Params.&amp;lt;パラメータ名&amp;gt; で参照することができます。 下記の site-info ショートコードは、サイトのタイトルとサブタイトル、筆者情報を表示するショートコードの実装例です。
layouts/shortcodes/site-info.html &amp;lt;div class=&amp;#34;title&amp;#34;&amp;gt;{{ $.Site.Title }}&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;subtitle&amp;#34;&amp;gt;{{ $.Site.Params.subtitle }}&amp;lt;/div&amp;gt; &amp;lt;ul&amp;gt; {{ range $.Site.Params.authors }} &amp;lt;li&amp;gt;{{- . -}}&amp;lt;/li&amp;gt; {{ end }} &amp;lt;/ul&amp;gt; ☝️ ワンポイント 上記のコードの中で、{{- . -}} と書いてある部分は、ループ処理で取り出した著者の名前を出力することを示しています。 {{ . }} と記述する代わりに、前後にハイフンを入れておくことで、出力時に前後の余計なスペースを取り除いてくれます。 コンテンツファイル (.</description></item><item><title>Hugo で独自のショートコードを作成する</title><link>https://maku77.github.io/p/ttfyk5o/</link><pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ttfyk5o/</guid><description>Hugo で独自のショートコードを作成すると、定型の HTML コードを記事内に簡単に埋め込めるようになります。
ショートコード作成の基本 ショートコードは、layouts/shortcodes ディレクトリ内に .html 拡張子のファイルとして作成します。
layouts/shortcodes/my-shortcode.html This is my first short code. ファイル名から拡張子を除いたものが、ショートコード名となります。 上記の例の場合、my-shortcode というショートコードを作成したことになります。 記事（Markdown ファイル）の中から、下記のように呼び出すと、上記の内容がそこに展開されます。
content/page1.md --- title: &amp;#34;ページタイトル&amp;#34; --- {{&amp;lt; my-shortcode &amp;gt;}} ショートコードにパラメータを渡す (.Get) 単純なパラメータ ショートコード呼び出し時に、パラメータを渡すことができます。 下記の例では、２つのパラメータ red、32px を渡しています。
{{&amp;lt; my-shortcode red 32px &amp;gt;}} 渡されたパラメータは、ショートコードの中で {{ .Get インデックス番号 }} のように参照することができます。
layouts/shortcodes/my-shortcode.html &amp;lt;div style=&amp;#34;color:{{ .Get 0 }}; font-size:{{ .Get 1 }};&amp;#34;&amp;gt; This is my first short code. &amp;lt;/div&amp;gt; 名前付きパラメータ 上記の例では、参照するパラメータをインデックス番号 (0, 1, 2, &amp;hellip;) で指定していますが、2 つ以上のパラメータを持つショートコードを作成するときは、名前付きパラメータ の仕組みを使うと分かりやすくなります。</description></item><item><title>Hugo のショートコードで本文内に HTML スニペットを埋め込む</title><link>https://maku77.github.io/p/tsfzj4n/</link><pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/tsfzj4n/</guid><description>記事の中に定型のコード（YouTube 動画表示用 HTML など）を埋め込みたいときは、Hugo のショートコード (Shortcode) の機能を使用すると便利です。
ショートコードの基本 Hugo は基本的にマークダウン形式で記事を記述していくのですが、マークダウンの表現力には限界があるので、ときには HTML を直接記述したくなることがあります。 しかし、毎回同じような HTML を記述するのでは、マークダウン形式を使用する意味がなくなってしまいます。 このような場合に、HTML 部分をショートコードとして外部ファイルに保存しておくと、記事の中に簡単にその HTML を埋め込めるようになります。
☝️ ワンポイント ショートコードは記事（コンテンツファイル）の中から呼び出すことができますが、テンプレートファイルの中からは呼び出せないことに注意してください。 テンプレートの中から同様のことを行いたい場合は、パーシャルテンプレートの仕組みを使用します。 Hugo には、いくつかの組み込みのショートコードが用意されています。 例えば、下記は Youtube の動画や、Instagram の投稿を埋め込むためのショートコードの使い方の例です。
例: Youtube 動画を記事内に埋め込む {{&amp;lt; youtube w7Ft2ymGmfc &amp;gt;}} {{&amp;lt; youtube id=&amp;#34;w7Ft2ymGmfc&amp;#34; autoplay=&amp;#34;true&amp;#34; &amp;gt;}} 例: Instagram の投稿を記事内に埋め込む {{&amp;lt; instagram BWNjjyYFxVx &amp;gt;}} 例: ツイートを記事内に埋め込む {{&amp;lt; tweet 877500564405444608 &amp;gt;}} ショートコードの呼び出し方 記事内からショートコードを呼び出すには、下記のような構文を使用します。
{{&amp;lt; shortcode-name param1 param2 &amp;gt;}} 名前付きのパラメータを使用する場合は、param1=&amp;quot;value1&amp;quot; のように記述します。
{{&amp;lt; shortcode-name param1=&amp;#34;value1&amp;#34; param2=&amp;#34;value2&amp;#34; &amp;gt;}} HTML タグのように、開始タグと終了タグで内部テキストを囲むこともできます (paired shortcode)。</description></item><item><title>Hugo で記事を作成する</title><link>https://maku77.github.io/p/q7sdwgy/</link><pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/q7sdwgy/</guid><description>記事ファイルを作成する Hugo で公開する Web サイトの記事は、content ディレクトリに Markdown ファイルとして作成します（例: sample.md）。 記事ファイルは、空っぽのテキストファイルから作成していくこともできますが、hugo new コマンドを使用することで、記事のひな形ファイル (archetypes/default.md) をベースにして Markdown ファイルを自動生成することができます。
記事ファイル（Markdown ファイル）を作成 $ hugo new sample.md /Users/maku/my_site/content/sample.md created 上記のように実行すると、content ディレクトリ内に sample.md ファイルが作成されます。 作成されたファイルの先頭部分には、下記のような Front matter というヘッダが記述されています。 このヘッダが、archetypes/default.md をもとにして自動生成されたものです。
content/sample.md --- title: &amp;#34;Sample&amp;#34; date: 2017-08-25T22:55:55+09:00 draft: true --- あとは、タイトル (title) を適切なものに書き換え、Front matter ヘッダ以降に記事の本文を記述していきます。 公開できるレベルまで記述できたら、ヘッダ部分の draft: true の行を削除します。
Archetypes ここで、ベースとなっている archetypes/default.md を覗いてみましょう。
archetypes/default.md --- title: {{ replace .TranslationBaseName &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34; date: {{ .</description></item><item><title>Hugo のテーマを設定する</title><link>https://maku77.github.io/p/h2cku5d/</link><pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/h2cku5d/</guid><description>テーマをダウンロードする Hugo で Web サイトを生成するときは、外観のベースとなる テーマ を設定する必要があります。 テーマを設定せずに hugo コマンドで Web サイトを出力しても、真っ白なページが表示されてしまうだけです。 テーマは自分で作成することもできますが、Hugo Themes というサイトに、有志の人によって作られたテーマが公開されていますので、まずはここからダウンロードして使ってみるのがよいでしょう。 使用方法はテーマごとに少しずつことなるので、詳細はそれぞれのテーマの説明 (README.md) を読んでください。
テーマの ZIP ファイルをダウンロードする方法 例えば、下記の bootstrap4-blog というテーマがよさそうであれば、Download ボタンを押します。
通常は、GitHub のサイトに飛ぶので、Clone or download のボタンを押してテーマをダウンロードしてください。
ダウンロードしたテーマは、プロジェクトの themes ディレクトリに配置します。 このケースでは、themes/bootstrap4-blog ディレクトリとして配置します。
テーマを Git で取得する方法 テーマは GitHub 上で管理されていますので、Git コマンドが使える環境であれば、下記のように git clone してしまうのが簡単です（もちろん先にリポジトリの URL は調べておく必要はありますが）。
$ git clone https://github.com/alanorth/hugo-theme-bootstrap4-blog.git themes/bootstrap4-blog もし、自分のサイトを Git 管理しているのであれば、次のようにテーマを Git サブモジュール として取り込んでしまうがよいです。 Git サブモジュールのコマンド (git submodule) はちょっと難しいですが、テーマをサブモジュールとして管理すれば、テーマ側の更新を適宜反映できるようになります。
# テーマをサブモジュールとして取り込む $ git submodule add https://github.com/alanorth/hugo-theme-bootstrap4-blog.git themes/bootstrap4-blog # テーマ側の更新を取り込むとき $ git submodule update --remote --recursive （必要に応じて）テーマごとのセットアップ テーマによっては、外部コンポーネントに依存していて、初期設定が必要なものもあります。 上記の bootstrap4-blog テーマでは、下記のように関連モジュールをインストールしてくださいと説明がありますので、その通りに実行しておきます。</description></item><item><title>Hugo でドラフトページを作成する</title><link>https://maku77.github.io/p/m2oatdw/</link><pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/m2oatdw/</guid><description>ドラフト記事 Hugo のドラフト機能は、未完成の記事ファイルを一時的にほかの記事と同じ場所に保存しておくための機能です。 ページの Front matter 部分に、draft: true という記述があると、そのページはドラフトとして扱われます。
YAML 形式の場合 --- draft: true --- 本文 TOML 形式の場合 +++ draft = true +++ 本文 ドラフトとして作成された記事は、デフォルトでは HTML ファイルとして出力されません。 ドラフト記事も出力するようにするには、hugo コマンドに -D (--buildDrafts) オプションを指定します。
ドラフト記事を出力 $ hugo -D # サイトを生成する場合 $ hugo server -D # サーバーを立ち上げる場合 public ディレクトリに出力されたドラフト記事に注意 hugo コマンドは、デフォルトで public ディレクトリに HTML ファイルなどを出力しますが、このとき、public ディレクトリ内に既に存在するドラフト記事を削除することはありません。
$ hugo -D # ここでドラフト記事も含めて生成される $ hugo # 次にドラフトモード OFF で生成しても、既存のドラフト記事が削除されない Web サイトを公開するときは、ドラフト記事が間違ってアップロードされないように気を付けてください。 記事のアップロード前は、public ディレクトリを削除してから hugo コマンドで再生成すると安全です。</description></item><item><title>Hugo で新規の Web サイトを作成する</title><link>https://maku77.github.io/p/bt5enw6/</link><pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/bt5enw6/</guid><description>ここでは、Hugo を使用して、新しく Web サイトを構築するための手順を示します。
図: Hugo で生成したサイトの例 サイトのスケルトンを生成する まずは Hugo をインストールして、hugo コマンドを使用できる状態にしてください。 下記のように hugo new site コマンドを使用して、Web サイトのひな型を作成することができます。
新しい Web サイト (my_site) を作成する $ hugo new site my_site Congratulations! Your new Hugo site is created in C:\Users\maku\my_site. Just a few more steps and you&amp;#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/, or create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command.</description></item><item><title>Hugo とは／Hugo をインストールする</title><link>https://maku77.github.io/p/r8ufyk5/</link><pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/r8ufyk5/</guid><description>Hugo とは Hugo (https://gohugo.io/) Hugo は Jekyll や Middleman と同様の静的サイトジェネレータです。 Markdown 形式などで記述したコンテンツから、HTML ファイルを作成してくれます。
Hugo は Google の Go 言語 で作成されており、他のサイトジェネレータに比べて 動作が非常に速い という特徴を持っています（それに比べて Jekyll は特に遅いですね ^^;）。 公式サイトでも動作の高速さをアピールしており、今後もその方針は変わらなさそうなので安心です。
また、インストールに関しても、他の（Ruby 製や Python 製の）サイトジェネレータは、さまざまな外部モジュールをインストールしなければいけないので時間がかかったりすることがありますが、Hugo であれば一瞬で終わります。 例えば、Windows の実行環境を構築する場合も、hugo.exe という１ファイルを置くだけで終わります。 LiveReload などの機能もデフォルトで組み込まれており、立ち上げまでの導入が非常にシンプルです。
Hugo のインストール Mac OS の場合 Mac の場合は、Homebrew (brew) で簡単に Hugo をインストール できます。
$ brew install hugo すでに Hugo がインストールされている状態で、Hugo を最新バージョンに更新 したいときは次のようにします。
$ brew upgrade hugo 現在インストールされている Hugo のバージョン は次のように確認できます。
$ hugo version Windows の場合 Windows の場合は、Hugo の Releases ページから zip アーカイブ（hugo_extended_0.</description></item></channel></rss>
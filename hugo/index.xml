<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on 天才まくまくノート</title><link>https://maku77.github.io/hugo/</link><description>Recent content in Hugo on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 28 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>レイアウト用のテンプレートの種類を理解する</title><link>https://maku77.github.io/p/zg4n7q9/</link><pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/zg4n7q9/</guid><description>Hugo では様々なタイプのテンプレートファイルを用意することができ、コンテンツファイルのパスに応じて、どのテンプレートファイルを使ってレンダリングされるかが決定されます。
Hugo のテンプレートファイル Hugo で Web サイトを作成する場合、コンテンツファイルとして Markdown ファイルを作成していきます。 この Markdown ファイルが HTML の形にレンダリングされるとき、テンプレートファイル が使用されます。 Hugo のテンプレートの仕組みを理解することは、Hugo を使いこなすキモとなります。 ここでは、どのような種類のテンプレートファイルが、どのようなコンテンツに対して適用されてレンダリングされるのかを把握しましょう。
ここでは、下記のようなコンテンツ階層があるものとして説明していきます。
コンテンツのディレクトリ階層 content/ +-- _index.md （ホームページ） +-- page1.md （通常のページ） +-- page2.md （通常のページ） +-- section1/ | +-- _index.md （セクションのインデックスページ ＝ セクションページ） | +-- pagel-1.md （通常のページ） | +-- page1-2.md （通常のページ） +-- section2/ +-- _index.md （セクションのインデックスページ ＝ セクションページ） +-- page2-1.md （通常のページ） +-- page2-2.md （通常のページ） ホームページテンプレート (Homepage Template) Homepage Template 最上位の _index.md をレンダリングするときは、ホームページテンプレート が使用されます。</description></item><item><title>Hugo で記事を作成する</title><link>https://maku77.github.io/p/q7sdwgy/</link><pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/q7sdwgy/</guid><description>記事ファイルを作成する Hugo で公開する Web サイトの記事は、content ディレクトリに Markdown ファイルとして作成します（例: sample.md）。 記事ファイルは、空っぽのテキストファイルから作成していくこともできますが、hugo new コマンドを使用することで、記事のひな形ファイル (archetypes/default.md) をベースにして Markdown ファイルを自動生成することができます。
記事ファイル（Markdown ファイル）を作成 $ hugo new sample.md /Users/maku/my_site/content/sample.md created 上記のように実行すると、content ディレクトリ内に sample.md ファイルが作成されます。 作成されたファイルの先頭部分には、下記のような Front matter というヘッダが記述されています。 このヘッダが、archetypes/default.md をもとにして自動生成されたものです。
content/sample.md --- title: &amp;#34;Sample&amp;#34; date: 2017-08-25T22:55:55+09:00 draft: true --- あとは、タイトル (title) を適切なものに書き換え、Front matter ヘッダ以降に記事の本文を記述していきます。 公開できるレベルまで記述できたら、ヘッダ部分の draft: true の行を削除します。
Archetypes ここで、ベースとなっている archetypes/default.md を覗いてみましょう。
archetypes/default.md --- title: {{ replace .TranslationBaseName &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34; date: {{ .</description></item><item><title>Hugo のテーマを設定する</title><link>https://maku77.github.io/p/h2cku5d/</link><pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/h2cku5d/</guid><description>テーマをダウンロードする Hugo で Web サイトを生成するときは、外観のベースとなる テーマ を設定する必要があります。 テーマを設定せずに hugo コマンドで Web サイトを出力しても、真っ白なページが表示されてしまうだけです。 テーマは自分で作成することもできますが、Hugo Themes というサイトに、有志の人によって作られたテーマが公開されていますので、まずはここからダウンロードして使ってみるのがよいでしょう。 使用方法はテーマごとに少しずつことなるので、詳細はそれぞれのテーマの説明 (README.md) を読んでください。
テーマの ZIP ファイルをダウンロードする方法 例えば、下記の bootstrap4-blog というテーマがよさそうであれば、Download ボタンを押します。
通常は、GitHub のサイトに飛ぶので、Clone or download のボタンを押してテーマをダウンロードしてください。
ダウンロードしたテーマは、プロジェクトの themes ディレクトリに配置します。 このケースでは、themes/bootstrap4-blog ディレクトリとして配置します。
テーマを Git で取得する方法 テーマは GitHub 上で管理されていますので、Git コマンドが使える環境であれば、下記のように git clone してしまうのが簡単です（もちろん先にリポジトリの URL は調べておく必要はありますが）。
$ git clone https://github.com/alanorth/hugo-theme-bootstrap4-blog.git themes/bootstrap4-blog もし、自分のサイトを Git 管理しているのであれば、次のようにテーマを Git サブモジュール として取り込んでしまうがよいです。 Git サブモジュールのコマンド (git submodule) はちょっと難しいですが、テーマをサブモジュールとして管理すれば、テーマ側の更新を適宜反映できるようになります。
# テーマをサブモジュールとして取り込む $ git submodule add https://github.com/alanorth/hugo-theme-bootstrap4-blog.git themes/bootstrap4-blog # テーマ側の更新を取り込むとき $ git submodule update --remote --recursive （必要に応じて）テーマごとのセットアップ テーマによっては、外部コンポーネントに依存していて、初期設定が必要なものもあります。 上記の bootstrap4-blog テーマでは、下記のように関連モジュールをインストールしてくださいと説明がありますので、その通りに実行しておきます。</description></item><item><title>Hugo でドラフトページを作成する</title><link>https://maku77.github.io/p/m2oatdw/</link><pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/m2oatdw/</guid><description>ドラフト記事 Hugo のドラフト機能は、未完成の記事ファイルを一時的にほかの記事と同じ場所に保存しておくための機能です。 ページの Front matter 部分に、draft: true という記述があると、そのページはドラフトとして扱われます。
YAML 形式の場合 --- draft: true --- 本文 TOML 形式の場合 +++ draft = true +++ 本文 ドラフトとして作成された記事は、デフォルトでは HTML ファイルとして出力されません。 ドラフト記事も出力するようにするには、hugo コマンドに -D (--buildDrafts) オプションを指定します。
ドラフト記事を出力 $ hugo -D # サイトを生成する場合 $ hugo server -D # サーバーを立ち上げる場合 public ディレクトリに出力されたドラフト記事に注意 hugo コマンドは、デフォルトで public ディレクトリに HTML ファイルなどを出力しますが、このとき、public ディレクトリ内に既に存在するドラフト記事を削除することはありません。
$ hugo -D # ここでドラフト記事も含めて生成される $ hugo # 次にドラフトモード OFF で生成しても、既存のドラフト記事が削除されない Web サイトを公開するときは、ドラフト記事が間違ってアップロードされないように気を付けてください。 記事のアップロード前は、public ディレクトリを削除してから hugo コマンドで再生成すると安全です。</description></item><item><title>Hugo で新規の Web サイトを作成する</title><link>https://maku77.github.io/p/bt5enw6/</link><pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/bt5enw6/</guid><description>ここでは、Hugo を使用して、新しく Web サイトを構築するための手順を示します。
図: Hugo で生成したサイトの例 サイトのスケルトンを生成する まずは Hugo をインストールして、hugo コマンドを使用できる状態にしてください。 下記のように hugo new site コマンドを使用して、Web サイトのひな型を作成することができます。
新しい Web サイト (my_site) を作成する $ hugo new site my_site Congratulations! Your new Hugo site is created in C:\Users\maku\my_site. Just a few more steps and you&amp;#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/, or create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command.</description></item><item><title>Hugo とは／Hugo をインストールする</title><link>https://maku77.github.io/p/r8ufyk5/</link><pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/r8ufyk5/</guid><description>Hugo とは Hugo (https://gohugo.io/) Hugo は Jekyll や Middleman と同様の静的サイトジェネレータです。 Markdown 形式などで記述したコンテンツから、HTML ファイルを作成してくれます。
Hugo は Google の Go 言語 で作成されており、他のサイトジェネレータに比べて 動作が非常に速い という特徴を持っています（それに比べて Jekyll は特に遅いですね ^^;）。 公式サイトでも動作の高速さをアピールしており、今後もその方針は変わらなさそうなので安心です。
また、インストールに関しても、他の（Ruby 製や Python 製の）サイトジェネレータは、さまざまな外部モジュールをインストールしなければいけないので時間がかかったりすることがありますが、Hugo であれば一瞬で終わります。 例えば、Windows の実行環境を構築する場合も、hugo.exe という１ファイルを置くだけで終わります。 LiveReload などの機能もデフォルトで組み込まれており、立ち上げまでの導入が非常にシンプルです。
Hugo のインストール Mac OS の場合 Mac の場合は、Homebrew (brew) で簡単に Hugo をインストール できます。
$ brew install hugo すでに Hugo がインストールされている状態で、Hugo を最新バージョンに更新 したいときは次のようにします。
$ brew upgrade hugo 現在インストールされている Hugo のバージョン は次のように確認できます。
$ hugo version Windows の場合 Windows の場合は、Hugo の Releases ページから zip アーカイブ（hugo_extended_0.</description></item></channel></rss>
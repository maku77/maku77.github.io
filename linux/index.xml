<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux/Shell on 天才まくまくノート</title><link>https://maku77.github.io/linux/</link><description>Recent content in Linux/Shell on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 20 Jul 2010 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash の変数展開機能を活用する（文字列の置換、デフォルト値など）</title><link>https://maku77.github.io/p/jsctar8/</link><pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/jsctar8/</guid><description>Bash の変数は通常 ${x} のような形で参照しますが、様々な変数展開機能を利用すると、変数の存在を確認したり、一部を置換したり、デフォルト値を設定したりすることができます。 下記にざっと紹介しますが、公式なドキュメントは man bash の Parameter Expansion のセクションで参照することができます。
パターン照合演算子 次のような変数展開の構文を使用すると、変数に格納された文字列の一部を置換した文字列を作成することができます。
構文 意味 ${変数/パターン/置換文字列} パターンに一致する部分を置換文字列に置き換える（１つだけ） ${変数//パターン/置換文字列} パターンに一致する部分を置換文字列に置き換える（すべて） ${変数#パターン} 先頭から最短一致でパターンに一致する部分を取り除く ${変数##パターン} 先頭から最長一致でパターンに一致する部分を取り除く ${変数%パターン} 末尾から最短一致でパターンに一致する部分を取り除く ${変数%%パターン} 末尾から最長一致でパターンに一致する部分を取り除く パターン部分では、ワイルドカード（*、?、[a-z] など）を使用できます。
例: 変数内の b を B に置換する $ x=aaabbbccc $ y=${x/b/B} $ echo $y aaaBbbccc 最初に見つかった文字列だけが置換されていることがわかります。 パターンに一致する文字列をすべて置換するには次のようにします（最初のスラッシュを2つにします）。
$ x=aaabbbccc $ y=${x//b/B} $ echo $y aaaBBBccc 以下のように sed コマンドを使ったのと同様の効果を bash の機能だけで実現できていることになります。
$ y=$(echo $x | sed -e &amp;#39;s/bbb/BBB/g&amp;#39;) 例: フルパスから basename を取り出す 下記の例では /aaa/bbb/ccc という絶対パスから、ベースネーム部分の ccc を抽出しています。 */ というパターンで先頭から最長一致させ、/aaa/bbb/ という部分を取り除いています。</description></item><item><title>シェルスクリプト: ある外部コマンドが使用できるかチェックする</title><link>https://maku77.github.io/p/xi5sjju/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/xi5sjju/</guid><description>シェルスクリプトの中で特定の外部コマンドを使用する必要がある場合、先頭部分でその外部コマンドが使用できる状態かどうかを調べておくと親切です。 例えば、次のようにすれば、ruby コマンドが使用できるかを確認できます。
sample.sh if type -P ruby &amp;gt; /dev/null; then echo &amp;#39;ruby コマンドを使用できます&amp;#39; else echo &amp;#39;ruby コマンドが見つかりません&amp;#39; fi ☝️ type -P コマンド type -P ruby コマンドは、パスの通ったディレクトリから ruby を検索してそのパスを取得するためのものですが、ここでは ruby コマンドが使用できる環境になっているかを確認するために利用しています。 単純に実行すると、検索結果のパスが出力されてしまうので、null デバイスへリダイレクトして出力を抑制しています。 特定のコマンドが使用できない場合にスクリプトを終了させるには、以下のように記述すればよいでしょう。 条件式を ! で反転させていることに注意してください。
if ! type -P ruby &amp;gt; /dev/null; then echo &amp;#39;This script requires Ruby. Please install Ruby first and try again.&amp;#39; &amp;gt;&amp;amp;2 exit -1 fi # 処理を継続</description></item><item><title>シェルスクリプト: ある環境変数が定義されているかチェックする (test -z)</title><link>https://maku77.github.io/p/r3myewb/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/r3myewb/</guid><description>環境変数がセットされているかを確認する 下記の例では、SRC_ROOT という環境変数が設定されているかを調べ、設定されていない場合はメッセージを終了しています。
sample.sh #!/bin/bash if [ -z $SRC_ROOT ]; then echo &amp;#39;Please set the &amp;#34;SRC_ROOT&amp;#34; environment variable and try again.&amp;#39; &amp;gt;&amp;amp;2 exit -1 fi echo &amp;#39;Program continues...&amp;#39; ☝️ ワンポイント echo の出力を &amp;gt;&amp;amp;2 とリダイレクトすると標準エラー出力へ出力できます。 実行例 $ ./sample.sh Please set the &amp;#34;SRC_ROOT&amp;#34; environment variable and try again. $ SRC_ROOT=/Users/maku/src ./sample.sh Program continues... （おまけ）test コマンドについて if [ -z $SRC_ROOT ]; then という条件判定は、次のように test コマンドを使うのと同等です。
if test -z $SRC_ROOT; then test -z コマンドは、指定された変数値の文字列長が 0 かどうかを確認するコマンドです。 これを利用して、上記のように 特定の変数値がセットされていない ことを調べることができます。</description></item><item><title>シェルスクリプト: コマンドライン引数の数が正しいかチェックする ($#)</title><link>https://maku77.github.io/p/4tbzpyf/</link><pubDate>Sun, 13 Jun 2010 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/4tbzpyf/</guid><description>関連記事: Linux シェルスクリプト: コマンドライン引数を取得する ($1, $@, $*)
コマンドライン引数が足りないときに Usage 出力して終了する シェルスクリプト起動時に渡されたコマンドライン引数の数は、$# 変数で取得することができます。 シェルスクリプトが最低 2 つのパラメーターを必要としている場合は、先頭部分で下記のようなチェックをするのがよいでしょう。
例: 2 つ以上のパラメーターが必要 #!/bin/bash if [ $# -lt 2 ]; then echo &amp;#34;Usage: $(basename $0) &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt;&amp;#34; &amp;gt;&amp;amp;2 exit -1 fi # 処理を継続 下記はバリエーションです。
例: 1 つ以上のパラメーターが必要 #!/bin/bash if [ ! &amp;#34;$1&amp;#34; ]; then echo &amp;#34;Usage: $(basename $1) &amp;lt;file&amp;gt;&amp;#34; &amp;gt;&amp;amp;2 exit -1 fi # 処理を継続 例: 1 つは引数が必要で、かつ、その名前のファイルが存在する #!/bin/bash if [ ! &amp;#34;$1&amp;#34; ]; then echo &amp;#34;Usage: $(basename $0) &amp;lt;file&amp;gt;&amp;#34; &amp;gt;&amp;amp;2 exit -1 fi if [ !</description></item><item><title>Linux シェルスクリプト: コマンドライン引数を取得する ($1, $@, $*)</title><link>https://maku77.github.io/p/c2kx7er/</link><pubDate>Wed, 29 Oct 2008 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/c2kx7er/</guid><description>コマンドライン引数の基本 ($1 ~ $9) bash シェルスクリプト実行時にコマンドラインで渡した引数を参照するには、次のようなパラメーター参照用の特殊変数を使用します。
$1 &amp;hellip; 第 1 パラメーター $2 &amp;hellip; 第 2 パラメーター $3 &amp;hellip; 第 3 パラメーター パラメーターの参照には、$1 〜 $9 が使用できます。 使用することは余りないと思いますが、10 番目以降のパラメータを参照したいときは、${10} のように数値を {} で囲めば参照できます。
sample.sh #!/bin/bash echo &amp;#39;1 番目: &amp;#39; &amp;#34;$1&amp;#34; echo &amp;#39;2 番目: &amp;#39; &amp;#34;$2&amp;#34; echo &amp;#39;3 番目: &amp;#39; &amp;#34;$3&amp;#34; 実行結果 $ ./sample.sh AAA BBB &amp;#34;CCC DDD&amp;#34; 1 番目: AAA 2 番目: BBB 3 番目: CCC DDD コマンドライン引数を指定しなかった場合は、対応する変数は空になります。
$ ./sample.sh AAA 1 番目: AAA 2 番目: 3 番目: ☝️ 変数はダブルクォートで囲む echo の引数として変数の値を渡すときは、&amp;quot;$1&amp;quot; のようにダブルクォートで囲む癖をつけましょう。 $1 のようにそのまま記述してしまうと、変数の値として連続するスペースが含まれていたときに 1 つのスペースにまとめられてしまいます。 ☝️ 引数とパラメーターの違い 正確には、引数 (arguments) という用語は、スクリプトや関数を呼び出す側が渡す値のことを示し、パラメーター (parameters) という用語は、呼び出される側のスクリプトや関数が、その値を参照するときに使う変数のことを示します。 ただ、どちらのケースでもパラメーターという用語を使っているドキュメントもよく見かけるので、あまり気にしないのがよさそうです。 コマンドライン引数にデフォルト値を指定する (${1:-XXX}) コマンドライン引数が指定されなかったときに使用する値として、デフォルト値を指定しておくこともできます。 デフォルト値は、パラメーター参照時に ${1:-デフォルト値} という形で指定します。 下記の例では、1 番目、2 番目、3 番目のコマンドラインパラメーターのデフォルト値を、それぞれ AAA、BBB、CCC に設定しています。</description></item><item><title>Linuxコマンド: ファイルやディレクトリを検索する (find, grep)</title><link>https://maku77.github.io/p/hudubr8/</link><pubDate>Mon, 08 Sep 2008 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/hudubr8/</guid><description>find と grep の基本 指定した拡張子のファイルを検索する (find) 次のようにすると、カレントディレクトリ (.) を起点にして、拡張子 .txt を持つファイルを検索して一覧表示することができます。
$ find . -name &amp;#39;*.txt&amp;#39; ファイル内の文字列を検索する (grep) 次のようにすると、指定したテキストファイル内の文字列を検索することができます。
$ grep &amp;#39;検索文字列&amp;#39; hello.txt find で見つけたファイルの中身を grep 検索する find で検索した結果のファイルそれぞれに対して、grep コマンドを実行するには、xargs を組み合わせて使用します。
例: 拡張子に txt を持つファイルを grep $ find . -type f -name &amp;#39;*.txt&amp;#39; | xargs grep &amp;#39;検索文字列&amp;#39; 拡張子などを絞り込まず、単純にそのディレクトリ以下のすべてのテキストファイルを検索するだけでよいのであれば、find を使わず、grep の再帰オプション (-r) を使った方が簡単です。 念のため、テキストファイルのみを grep 対象にするために -I オプション (--binary-files-without-match) も一緒に指定しておきます。
例: すべてのテキストファイルを grep $ grep -r -I &amp;#39;検索文字列&amp;#39; . grep で NOT、AND、OR 検索する NOT 検索 grep の -v オプションを指定すると、指定した 文字列を含まない 行だけを抽出できます。</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vagrant on 天才まくまくノート</title><link>https://maku77.github.io/vagrant/</link><description>Recent content in Vagrant on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 01 Nov 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/vagrant/index.xml" rel="self" type="application/rss+xml"/><item><title>Vagrantメモ: 不要な box を削除する (vagrant remove box)</title><link>https://maku77.github.io/p/6wsa466/</link><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/6wsa466/</guid><description>box ファイルとは Vagrant の仮想マシンは、OS のスナップショットともいえる box ファイルをベースにして生成されるようになっています。 この仕組みによって、仮想マシンの破棄 (vagrant destroy)、再生性 (vagrant up)、Ansible による環境構築のテスト、といった試行錯誤が短時間で実行できるようになっています。
box ファイルの実体は VirtualBox などの仮想イメージなので、ファイルサイズは非常に大きくなります（数百 MB ～ 数 GB 程度）。 そのため、box ファイルは複数の Vagrant プロジェクトから共有されるようになっており、デフォルトでは ~/.vagrant.d ディレクトリに格納されています（Windows の場合は %USERPROFILE%\.vagrant.d）。
$ ls ~/.vagrant.d/boxes centos-VAGRANTSLASH-7 hashicorp-VAGRANTSLASH-precise64 この例では、centos/7 と hashicorp/precise64 という box が格納されていることが分かります（スラッシュはファイル名に含められないので -VAGRANTSLASH- と置換されているようです）。
不要な box の削除 box ファイルはサイズが大きく、ホスト上のディスクスペースを消費してしまうため、本当に不要になったら削除してしまいましょう。 現在存在している box ファイルを確認するには、vagrant box list コマンドを使用します。
$ vagrant box list centos/7 (virtualbox, 1609.01) hashicorp/precise64 (virtualbox, 1.1.0) 不要な box が存在していることが分かったら、その box 名を vagrant box remove コマンドに渡します。</description></item><item><title>Vagrantメモ: Vagrant の３種類のネットワーク構成の違い</title><link>https://maku77.github.io/p/joud5wr/</link><pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/joud5wr/</guid><description>３種類のネットワーク構成の概要 Vagrant におけるホストマシンと仮想マシンの間のネットワーク構成は、下記の３種類の形態から選択して構築します。
ホストオンリーネットワーク (private network) ホストマシンと仮想マシンの間でプライベートなアドレス空間を割り当て、その範囲内で通信できるようにします。ホスト内で閉じた世界になります。 ポートフォワード (forwarded port) ホストマシンの特定のポート番号へのアクセスを、仮想マシンの特定のポート番号にフォワードします。物理ネットワーク上では、1台のホストマシンがすべてのサービスを提供しているかのように見えます。 ブリッジネットワーク (bridge network) ホストマシンが参加している物理ネットワークに仮想マシンを参加させます。物理ネットワーク上で IP アドレスが割り当てられるため、あたかも物理的なマシンが増えたかのように見えます。 どのネットワーク構成を選択するべきか それぞれのネットワーク構成に一長一短があり、状況に応じて適切なネットワーク構成を選ぶことになります。 ここでは、各マシン同士のアクセスが可能かどうかと、そこから判断した仮想マシン側のセキュリティリスクという観点でざっと特徴をまとめておきます。
ネットワーク構成 host
↓
guest guest
↓
host guest
↓
guest physical net
↓
guest Security risk ホストオンリーネットワーク
(private network) OK OK OK &amp;ndash; Low（仮想マシンは外から見えない） ポートフォワード
(forwarded port) OK &amp;ndash; &amp;ndash; OK Medium（仮想マシンの特定のポートだけアクセス可能） ブリッジネットワーク
(public network) OK OK OK OK High（仮想マシンが物理ネットワークに参加する）</description></item><item><title>Vagrantメモ: ブリッジネットワークを構築する</title><link>https://maku77.github.io/p/ymenseo/</link><pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ymenseo/</guid><description>Vagrant でブリッジネットワークを有効にすると、ホストマシンと同じ LAN 内に、あたかももう一台の物理マシンがあるかのように、仮想マシンに IP アドレスを割り当てることができます。
Public Networks - Networking - Vagrant by HashiCorp ホストオンリーネットワークと同様に、仮想マシンからホストマシンへアクセスできるようになるだけでなく、LAN 内の他のマシンから仮想マシンにアクセスすることもできます（LAN のセキュリティポリシーでマシン間のアクセスが制限されている場合を除く）。
ブリッジネットワークを有効にするには、下記のように config.vm.network のネットワークタイプとして、public_network を設定します。
LAN 内の DHCP サーバから IP アドレスを割り当てる Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.network &amp;#34;public_network&amp;#34; end 静的に IP アドレスを割り当てる Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.network &amp;#34;public_network&amp;#34;, ip: &amp;#34;192.168.0.17&amp;#34; end Vagrantfile を変更したら、仮想マシンを立ち上げなおせば設定が反映されます。
$ vagrant reload</description></item><item><title>Vagrantメモ: ホストオンリーネットワークを構成する (private network)</title><link>https://maku77.github.io/p/oyoyz27/</link><pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/oyoyz27/</guid><description>ホストオンリーネットワークの特徴 ホストオンリーネットワーク (private network) の構成を利用すると、ホストマシンと仮想マシンの間に専用のネットワークを構築できます。
ホストオンリーネットワークにはホストマシンと仮想マシンの間だけから見えるプライベート IP アドレスを割り当てるため、既存の物理 LAN 上に存在する他のマシンからは、仮想マシンの存在を知ることはできません。 既存の LAN への影響がないため、パブリックな環境でも安心して利用できるネットワーク構成と言えます（既存の物理 LAN とは異なるネットワークに割り当てて使用します）。
物理 LAN 上のマシン ----[NG]----&amp;gt; 仮想マシン 一方で、ホストマシンと仮想マシンは同じ専用ネットワークに所属することになるため、相互に自由なアクセスが可能です。 例えば、仮想マシンからホスト上で動作しているサービスを利用する、といったことが行えます。
ホスト &amp;lt;----[OK]----&amp;gt; 仮想マシン ポートフォワードを利用したネットワーク構成と比べ、各マシンで動作するサーバに素のポート番号でアクセスできる（HTTP サーバにポート 80 でアクセスできる）ため、シンプルで分かりやすいネットワーク構成になります。
ホストオンリーネットワークを構成する ホストオンリーネットワークを構築するには、config.vm.network で private_network を指定します。 ここでは、プライベートネットワークとして 192.168.100.0 というネットワークアドレス使用することにします。 仮想マシンには 192.168.100.10 という IP アドレスを割り当てます。 仮想マシンの IP アドレスの末尾は１にしないようにしてください（後述）。
Vagrantfile（DHCP で構成する） Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;hashicorp/precise64&amp;#34; config.vm.network &amp;#34;private_network&amp;#34;, ip: &amp;#34;192.168.100.10&amp;#34; end あとは Vagrant 仮想マシンをリロードすれば設定が反映されます。
$ vagrant reload ホスト側に割り当てられるプライベートアドレス ホストオンリーネットワークを構成すると、ホスト側のアドレスとしては、ネットワークアドレスの下位オクテット（最後の８ビット）が１になったアドレスが割り当てられます。 仮想マシン側のアドレスの末尾を１にしなかったのはそのためです。
ホスト側の IP アドレスを確認してみると、Host-Only Network というセクションで、192.</description></item><item><title>Vagrantメモ: 複数の仮想マシンで共通の SSH キーを使用する</title><link>https://maku77.github.io/p/y9zrmbf/</link><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/y9zrmbf/</guid><description>Vagrant で作成した複数の仮想マシンを Ansible などでまとめて制御する場合、同じ SSH キーでアクセスできると便利だったりします。
Vagrant 1.7 以降のデフォルトでは、作成した仮想マシンごとに異なる SSH キーが設定されます。 例えば、ここでは、下記のような Vagrantfile を使用して３つの仮想マシンを作成してみます。
Vagrantfile BOX = &amp;#34;hashicorp/precise64&amp;#34; Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.define &amp;#34;vagrant1&amp;#34; do |c| c.vm.box = BOX end config.vm.define &amp;#34;vagrant2&amp;#34; do |c| c.vm.box = BOX end config.vm.define &amp;#34;vagrant3&amp;#34; do |c| c.vm.box = BOX end end 立ち上げます。
$ vagrant up Bringing machine &amp;#39;vagrant1&amp;#39; up with &amp;#39;virtualbox&amp;#39; provider... Bringing machine &amp;#39;vagrant2&amp;#39; up with &amp;#39;virtualbox&amp;#39; provider... Bringing machine &amp;#39;vagrant3&amp;#39; up with &amp;#39;virtualbox&amp;#39; provider.</description></item><item><title>Vagrantメモ: 不要な Vagrant 仮想マシンを削除する (vagrant destroy)</title><link>https://maku77.github.io/p/2gdbr8x/</link><pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/2gdbr8x/</guid><description>Vagrant で試行錯誤して仮想マシンを作っていると、以前作成した仮想マシンのゴミが残ってしまうことがあります。 ポートフォワード設定が重複してしまうと、新しい仮想マシンの起動も下記のように失敗してしまいます。
The forwarded port to 8080 is already in use on the host machine. 不要な仮想マシンを特定して１つずつ削除する このような場合は、まず vagrant global-status で Vagrant で管理されている仮想マシンの一覧を表示します。 vagrant status と異なり、vagrant global-status はどのディレクトリからでも実行でき、ホスト上のすべての Vagrant 環境に関する情報を表示してくれます。
C:\&amp;gt; vagrant global-status id name provider state directory -------------------------------------------------------------------------- 963e6d9 vagrant1 virtualbox running D:/z/vagrant dd68a71 vagrant2 virtualbox poweroff D:/z/vagrant The above shows information about all known Vagrant environments on this machine. This data is cached and may not be completely up-to-date.</description></item><item><title>Vagrantメモ: 複数の仮想マシンを同時に立ち上げる</title><link>https://maku77.github.io/p/uu87xz5/</link><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/uu87xz5/</guid><description>複数の仮想マシンを立ち上げる Vagrant 仮想マシンとして複数のサーバを同時に立ち上げるには、Vagrantfile の中で下記のようにそれぞれの仮想マシン定義を行います。 ここでは、すべて仮想マシンの box として hashicorp/precise (Ubuntu 12.04) を指定していますが、仮想マシンごとに異なる box を設定することもできます。
Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;hashicorp/precise64&amp;#34; config.vm.define &amp;#34;vagrant1&amp;#34; do |c| c.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 10080 c.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 443, host: 10443 end config.vm.define &amp;#34;vagrant2&amp;#34; do |c| c.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 20080 c.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 443, host: 20443 end config.vm.define &amp;#34;vagrant3&amp;#34; do |c| c.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 30080 c.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 443, host: 30443 end end 各仮想マシンのコンフィギュレーションブロック内でポートフォワード設定を行っていますが、単純に仮想マシンを立ち上げるだけであれば、このあたりの個別の設定は後回しにしても構いません。 あとは、vagrant up とするだけで、すべての仮想マシンが順番に立ち上がります。</description></item><item><title>Vagrantメモ: ポートフォワードにより仮想マシン内のサーバにアクセスする</title><link>https://maku77.github.io/p/zssu72a/</link><pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/zssu72a/</guid><description>ポートフォワードによるネットワーク構成について Vagrant 仮想マシン内でサーバを立ち上げた場合、デフォルトではそのポートは仮想マシン内で閉じた世界のものになっています。 例えば、仮想マシン内で Web サーバをポート番号 80 で立ち上げただけでは、外の世界（ホスト側）から http://localhost/ でアクセスできるようにはなりません。 外の世界から仮想マシン内のサーバにアクセスできるようにするための方法として、ポートフォワードがあります（ブリッジネットワークを構築する方法もあります）。
ポートフォワードの設定では、ホストマシンのあるポート番号を、特定の仮想マシンのポート番号にマッピングします。 ホストマシンの特定のポート番号にアクセスがあったときに、ホストマシンが仮想マシンに対してリクエストを転送することで、間接的に仮想マシンへ接続されます。
LAN 上のマシン ----[port:10080]----&amp;gt; ホスト ----[port:80]----&amp;gt; 仮想マシン ポートフォワードを利用したネットワーク構成では、既存の物理 LAN 上の別のマシンからは、ホストマシンの IP アドレスしか見えません。 仮想マシンの存在は隠蔽されており、ホストマシンですべてのサービスが提供されているかのように見えます。
ポートフォワードの設定を行う Vagrantfile ファイルの中で、config.vm.network に forwarded_port を設定することで、ポートフォワードの設定を行うことができます。 下記は、仮想マシン内の HTTP (80) と HTTPS (443) のポートを、ホスト側のポート 10080 と 10443 にそれぞれマッピングする例です。
Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;hashicorp/precise64&amp;#34; config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 80, host: 10080 # HTTP config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 443, host: 10443 # HTTPS end 設定を変更したら、仮想マシンをリロードして反映させます。
$ vagrant reload .</description></item><item><title>Vagrantメモ: Vagrant プラグインを vagrant up で自動的にインストールする</title><link>https://maku77.github.io/p/3wvm5wi/</link><pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/3wvm5wi/</guid><description>Vagrant のプラグインは下記のようにインストールすることができます。
$ vagrant plugin install ＜プラグイン名＞ Vagrantfile に下記のように記述しておけば、プラグインのインストールを、vagrant up 時に自動的に行うことができるようになります。
Vagrantfile def install_plugin(plugin) system &amp;#34;vagrant plugin install #{plugin}&amp;#34; unless Vagrant.has_plugin? plugin end # 必要なプラグインを指定 install_plugin(&amp;#39;vagrant-proxyconf&amp;#39;) Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;hashicorp/precise64&amp;#34; # ... end 実行例 $ vagrant up Installing the &amp;#39;vagrant-proxyconf&amp;#39; plugin. This can take a few minutes... Installed the plugin &amp;#39;vagrant-proxyconf (1.5.2)&amp;#39;! Bringing machine &amp;#39;default&amp;#39; up with &amp;#39;virtualbox&amp;#39; provider...</description></item><item><title>Vagrantメモ: ホストマシンと仮想マシンでファイルを共有する</title><link>https://maku77.github.io/p/ad8jegg/</link><pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ad8jegg/</guid><description>Vagrant ホスト側の Vagrantfile の置かれているディレクトリは、仮想マシン側からは、/vagrant というパスで参照することができます。
vagrant@precise64:~$ ls /vagrant Vagrantfile この性質を利用して、仮想マシン側で使用するシェルスクリプトを、ホスト側のエディタで編集するといったことが可能になります。</description></item><item><title>Vagrantメモ: 仮想マシンでシェルスクリプトを実行する</title><link>https://maku77.github.io/p/4qkuf64/</link><pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/4qkuf64/</guid><description>Vagrant では、仮想マシンの作成時にシェルスクリプトを実行して、サーバ環境のセットアップを行うことができます。 下記のように、config.vm.provision でシェルスクリプトを指定しておくと、仮想マシン側で任意の処理を実行することができます。
外部のシェルスクリプトファイルを実行する Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;hashicorp/precise64&amp;#34; config.vm.provision :shell, path: &amp;#34;bootstrap.sh&amp;#34; end シェルスクリプトは、Vagrantfile があるディレクトリと同じディレクトリに置きます。
bootstrap.sh apt-get update apt-get install -y nginx config.vm.provision で指定したシェルスクリプトは、仮想マシンの作成し直したときか、vagrant provision コマンドを実行したときに実行されます。 仮想マシンを作成し直すには、vagrant destroy と vagrant up の実行が必要なため時間がかかります。 テストで実行する場合は、vagrant provision コマンドを使用するとよいでしょう。
起動中の仮想マシンで provision 実行 $ vagrant provision Vagrantfile に埋め込んだシェルスクリプトを実行する 下記のようにすれば、仮想マシンで実行したいシェルスクリプトを Vagrantfile ファイル内に埋め込むことができます。
Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;hashicorp/precise64&amp;#34; config.vm.provision :shell, inline: $script end $script = &amp;lt;&amp;lt;END apt-get update apt-get install -y nginx END provision 実行 $ vagrant provision 詳細なコンフィギュレーションには Ansible を使うべし 上記のように、シェルスクリプトを利用してサーバ環境のセットアップを行うものよいのですが、シェルスクリプトは、あくまで仮想マシン作成時に一度だけ実行することを前提としています。 設定を少しずつ変更しながら環境を構築していきたい場合などは、Ansible や Chef などのツールを使用するのがオススメです。 Ansible や Chef には冪統性（べきとうせい）を保証する仕組みが備わっており、試行錯誤しながら最終的なコンフィギュレーションに近づけていくことができます。</description></item><item><title>Vagrantメモ: 仮想マシンのプロキシを設定する</title><link>https://maku77.github.io/p/jgcwrrg/</link><pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/jgcwrrg/</guid><description>Vagrant の仮想マシン側のプロキシ設定を行うには、vagrant-proxyconf プラグインを使用すると便利です。
vagrant-proxyconf によるプロキシ設定 Vagrant のプラグインは、vagrant plugin install で簡単にインストールすることができます。
vagrant-proxyconf プラグインのインストール $ vagrant plugin install vagrant-proxyconf Installing the &amp;#39;vagrant-proxyconf&amp;#39; plugin. This can take a few minutes... Installed the plugin &amp;#39;vagrant-proxyconf (1.5.2)&amp;#39;! あとは、Vagrantfile の中で下記のようにプロキシ設定を行います。
Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;hashicorp/precise64&amp;#34; config.proxy.http = &amp;#34;http://proxy.example.com:8080&amp;#34; config.proxy.https = &amp;#34;http://proxy.example.com:8080&amp;#34; config.proxy.no_proxy = &amp;#34;localhost,127.0.0.1&amp;#34; end すると、Vagrant 仮想マシンを立ち上げるときに、自動的に各アプリ用のプロキシが設定されます。
$ vagrant up ... ==&amp;gt; default: Configuring proxy for Apt... ==&amp;gt; default: Configuring proxy environment variables... これで、Vagrant 仮想マシンから apt-get コマンドなどを実行したときにプロキシ経由でアクセスするようになります。</description></item><item><title>Vagrantメモ: Vagrant により仮想マシンを立ち上げる</title><link>https://maku77.github.io/p/4trtqtw/</link><pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/4trtqtw/</guid><description>Vagrant は、仮想マシンの構成をするための情報として Vagrantfile というファイルを参照するので、まずはこのファイルを作成する必要があります。
Vagrantfile を生成する vagrant init コマンドで、Vagrantfile の雛形を生成することができます。 ここでは、HashiCorp の提供している Ubuntu 12.04 LTS 64-bit のイメージ (hashicorp/precise64) を使用するように指定しています。
$ vagrant init hashicorp/precise64 A `Vagrantfile` has been placed in this directory. You are now ready to `vagrant up` your first virtual environment! Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information on using Vagrant. 仮想マシンのベースとなる OS イメージのことを box と呼びます。 デフォルトで使用可能な box は下記のようなものが用意されており、他の box は HashiCorp&amp;rsquo;s Atlas で探すことができます。</description></item><item><title>Vagrantメモ: Vagrant の仮想マシンに SSH で接続する</title><link>https://maku77.github.io/p/itd26k3/</link><pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/itd26k3/</guid><description>vagrant ssh コマンドで SSH 接続する vagrant up コマンドによる仮想マシンの起動が終わると、SSH でシェル接続が可能になります。 通常、SSH での接続にはサーバアドレスやユーザ ID の指定などが必要ですが、Vagrant によって立ち上げられた仮想マシンには、vagrant ssh コマンドを使用して簡単に SSH 接続できるようになっています。
$ vagrant ssh Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic x86_64) * Documentation: https://help.ubuntu.com/ Welcome to your Vagrant-built virtual machine. Last login: Wed Oct 19 06:59:47 2016 from 10.0.2.2 vagrant@precise64:~$ vagrant ssh 経由で Vagrant の仮想マシンに接続するには、OpenSSH ベースの SSH クライアントがインストールされている必要があります。
SSH クライアントがインストールされていない場合のエラー $ vagrant ssh `ssh` executable not found in any directories in the %PATH% variable.</description></item><item><title>Vagrantメモ: Vagrant とは？ Vagrant をインストールする</title><link>https://maku77.github.io/p/dwwvd7z/</link><pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/dwwvd7z/</guid><description>Vagrant とは？ Vagrant（ベイグラント）は、仮想環境の構築（OS 自体のインストールを含む）から設定までを自動で行うためのソフトウェアです。
Vagrantfile という設定ファイルを記述しておくと、同じ OS 環境、同じソフトウェアのインストールから設定を１ステップ (vagrant up) で再現できるようになります。 VirtualBox、VMware、Hyper-V などのローカルの仮想環境だけでなく、AWS (Amazon EC2) などのクラウド上の仮想環境もサポートします（Vagrant ではこれらを provider と呼びます）。共通の Vagrantfile を使用しつつ、立ち上げ先の環境だけを切り替えることができる (vagrant up --provider=aws) ので、VirtualBox から AWS へ乗り換えた場合なども、同じワークフローで環境構築できます（→ 運用エンジニア (Ops) のメリット）。 各開発者が同一のサーバ環境を構築できるようになり、開発環境の構築ミスによるエラーを防ぐことができます（→ 開発エンジニア (Dev) のメリット）。 環境構築の手順がコードによって管理されることにより、従来のソフトウェア開発においてソースコードに対して適用されていた、バージョン管理、レビュー、テストなどのプロセスを環境構築にも適用することができるようになります (→ IaaS: Infrastructure as a Code)。 Vagrant 自体の開発言語は Ruby です。 Vagrant をインストールする 各 OS 用の Vagrant パッケージは下記からダウンロードできます。
Vagrant by HashiCorp Vagrant 1.8.6 for Windows のパッケージサイズは 167 MB です。 正しくインストールできたかどうかは、下記のように確認できます。
D:\&amp;gt; vagrant --version Vagrant 1.8.6 仮想環境として、VirtualBox を使用する場合は、VirtualBox も別途インストールしておく必要があります。 AWS などのクラウド環境を使用する場合は、VirtualBox のインストールは必要ありません。</description></item></channel></rss>
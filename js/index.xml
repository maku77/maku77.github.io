<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on 天才まくまくノート</title><link>https://maku77.github.io/js/</link><description>Recent content in JavaScript on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 01 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/js/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript で文字列を指定の長さになるまでパディング（埋め合わせ）する (String#padStart, #String#padEnd)</title><link>https://maku77.github.io/p/buatano/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/buatano/</guid><description>padStart と padEnd の基本 JavaScript の String#padStart() および String#padEnd() メソッドを使うと、指定した文字数になるまで文字列を拡張してくれます。 どのような文字で埋め合わせるかは、第 2 引数で指定します。
左側にパディング const s = &amp;#34;ABC&amp;#34;; console.log(s.padStart(2, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;ABC&amp;#34; console.log(s.padStart(3, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;ABC&amp;#34; console.log(s.padStart(4, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;xABC&amp;#34; console.log(s.padStart(5, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;xxABC&amp;#34; console.log(s.padStart(6, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;xxxABC&amp;#34; 右側にパディング const s = &amp;#34;ABC&amp;#34;; console.log(s.padEnd(2, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;ABC&amp;#34; console.log(s.padEnd(3, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;ABC&amp;#34; console.log(s.padEnd(4, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;ABCx&amp;#34; console.log(s.padEnd(5, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;ABCxx&amp;#34; console.log(s.padEnd(6, &amp;#34;x&amp;#34;)); //=&amp;gt; &amp;#34;ABCxxx&amp;#34; 第 2 引数に 2 文字以上の文字列を指定すると、各文字が順番に使われます。
const s = &amp;#34;ABC&amp;#34;; console.</description></item><item><title>JavaScript で文字列から正規表現パターンに一致する部分を取り出す (String#match, RegExp#exec)</title><link>https://maku77.github.io/p/tvuztbm/</link><pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/tvuztbm/</guid><description>JavaScript の String オブジェクトの中で正規表現を利用できるメソッドとしては、search()、replace()、split() などがありますが、中でも強力なのは match() メソッドです。
String#match(regexp) メソッドを使用すると、指定した正規表現パターンに一致する部分を配列オブジェクトとして取得することができます。 一致する部分がひとつも見つからない場合は null を返します。 match メソッドは、パラメータとして渡す正規表現パターンで g フラグを指定した場合と指定しない場合で振る舞いが変化します。
match の正規表現パターンに g フラグを指定したとき String#match(regexp) の正規表現パターンで、g フラグを付加すると、戻り値はパターンに一致した部分文字列の配列 になります。
例: 数値部分だけを抽出して配列で取得する const text = &amp;#39;ABC 123 DEF 456 GHI 789 123ABC&amp;#39;; const arr = text.match(/\b\d+\b/g); if (arr != null) { console.log(arr); //=&amp;gt; [ &amp;#39;123&amp;#39;, &amp;#39;456&amp;#39;, &amp;#39;789&amp;#39; ] } match の正規表現パターンに g フラグを指定しなかったとき String#match(regexp) の正規表現パターンで g フラグを付加しない場合、RegExp#exec(string) を単発で呼び出した場合と同様の振る舞い をします。 具体的には、戻り値の配列の先頭には、パターンに一致した部分の全体が格納され、残りの配列要素（インデックス 1 以降）には、( と ) でグルーピングされたパターンに一致した部分文字列が順番に格納されます。
これを利用すると、特定のフォーマットに従った文字列から各パートの文字列を抽出するということが簡単に実現できます。</description></item><item><title>JavaScript で文字列の中から文字列を検索する (String#search, RegExp#test)</title><link>https://maku77.github.io/p/p5nx3n9/</link><pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/p5nx3n9/</guid><description>String#search による文字列検索 search の基本 String#search() メソッドを使用すると、正規表現パターンを使用して String オブジェクト内の文字列を検索することができます。 文字列が見つかった場合は、その先頭のインデックスを返し、見つからなかった場合は -1 を返します。 パラメータには RegExp オブジェクトを指定するか、次のように正規表現リテラルで検索パターンを指定します（単純な文字列を渡した場合は、内部で RegExp オブジェクトが生成されます）。
例: text の中から leader という文字列を検索 const text = &amp;#34;A leader is a dealer in hope.&amp;#34;; const index = text.search(/leader/); if (index == -1) { console.log(&amp;#34;見つかりませんでした&amp;#34;); } else { console.log(`位置 ${index} に見つかりました`); } 実行結果 位置 2 に見つかりました。 大文字と小文字を区別しない検索 String#search() メソッドのパラメータとして渡す正規表現の属性として i を指定すると、大文字と小文字を区別しない検索を行えます。
const index = text.search(/javascript/i); 上記のようにすると、JavaScript にも javascript にも JAVASCRIPT にも一致します。
コラム: グローバル検索はない String#search() メソッドは、最初に見つかった文字列のインデックスを返すため、次のように正規表現属性の g（グローバル検索）を指定しても無視されます（意味がありません）。</description></item><item><title>JavaScript で HTML の DOM 要素を取得する (1) タグ名、クラス名、ID を検索</title><link>https://maku77.github.io/p/on7omgt/</link><pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/on7omgt/</guid><description>タグ名で要素を取得する (getElementsByTagName) document.getElementsByTagName() 関数を使用すると、指定したタグ名を持つ要素を取得することができます。 同じタグ名を持つ要素は複数存在する可能性があるので、戻り値は配列になります。
例: p 要素をすべて取得する &amp;lt;p&amp;gt;こんにちは&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;おやすみ&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; window.onload = function() { const elems = document.getElementsByTagName(&amp;#34;p&amp;#34;); for (const e of elems) { console.log(e.innerText); } }; &amp;lt;/script&amp;gt; 実行結果 こんにちは おやすみ クラス名で要素を取得する (getElementsByClassName) document.getElementsByClassName() 関数を使用すると、指定したクラス名が class 属性に含まれている要素を取得することができます。 そのような要素は複数存在する可能性があるので、戻り値は配列になります。
&amp;lt;div class=&amp;#34;foo&amp;#34;&amp;gt;AAA&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;foo bar&amp;#34;&amp;gt;BBB&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;foo bar baz&amp;#34;&amp;gt;CCC&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; window.onload = function() { const elems = document.getElementsByClassName(&amp;#34;foo&amp;#34;); for (const e of elems) { console.log(e.innerText); } }; &amp;lt;/script&amp;gt; 実行結果 AAA BBB CCC ID で要素を取得する (getElementById) document.</description></item><item><title>JavaScript で文字列をデリミタで分割する／1文字ずつに分割する (String#split)</title><link>https://maku77.github.io/p/dpp4v8n/</link><pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/dpp4v8n/</guid><description>JavaScript の文字列を任意の区切り文字で分割するには、split() メソッドを使用します。
カンマで文字列を分割する const s = &amp;#39; aaa, bbb, ccc &amp;#39;; const arr = s.split(&amp;#39;,&amp;#39;); // =&amp;gt; [&amp;#34; aaa&amp;#34;, &amp;#34; bbb&amp;#34;, &amp;#34; ccc &amp;#34;] 区切り文字列の前後の空白を削除したい場合は、以下のように正規表現で区切り文字を指定するとよいでしょう。
const s = &amp;#39; aaa, bbb, ccc &amp;#39;; const arr = s.split(/\s*,\s*/); // =&amp;gt; [&amp;#34; aaa&amp;#34;, &amp;#34;bbb&amp;#34;, &amp;#34;ccc &amp;#34;] 元のテキストの先頭や末尾にある空白が残ってしまっていることに注意してください。 これらを削除するには、以下のように最初に trim() で消してしまうのが早いです。
const s = &amp;#39; aaa, bbb, ccc &amp;#39;; const arr = s.trim().split(/\s*,\s*/); // =&amp;gt; [&amp;#34;aaa&amp;#34;, &amp;#34;bbb&amp;#34;, &amp;#34;ccc&amp;#34;] あるいは、以下のように分割した後の各文字列に対して trim() を実行するという方法もありますが、元の文字列に 1 回だけ trim() をかけた方が効率がよいでしょう。</description></item><item><title>JavaScript で文字列を置換する (String#replace, String#replaceAll)</title><link>https://maku77.github.io/p/8pnuzk4/</link><pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/8pnuzk4/</guid><description>replace と replaceAll の基本 String#replace() メソッドを使用すると、String オブジェクト内のパターンに一致する文字列を置換することができます。
ABC を XXX に置換 const text = &amp;#39;ABC 123 ABC 123&amp;#39;; const s = text.replace(&amp;#39;ABC&amp;#39;, &amp;#39;XXX&amp;#39;); //=&amp;gt; &amp;#39;XXX 123 ABC 123&amp;#39; replace() メソッドは、自分自身のオブジェクトの内容を変更しないため、置換結果は戻り値として受け取る必要があることに注意してください。
また、デフォルトでは上記のように、最初に見つかった文字列だけ が置換されます。 パターンが複数箇所に一致した場合に、すべて置換するには、次のように String#replaceAll() メソッドを使用します（後述の正規表現パターンを使用する方法もあります）。
すべての ABC を XXX に置換 const text = &amp;#39;ABC 123 ABC 123&amp;#39;; const s = text.replaceAll(&amp;#39;ABC&amp;#39;, &amp;#39;XXX&amp;#39;); //=&amp;gt; &amp;#39;XXX 123 ABC 123&amp;#39; 正規表現パターンに一致する文字列を全て置換する String#replace() メソッドの第 1 引数には、正規表現パターンを渡すこともできます。 正規表現属性の g（グローバル検索）を付ければ、パターンに一致した部分すべてを一括置換することができます（replaceAll() ではなく、replace() ですべて置換できます）。
例: すべての ABC を XXX に置換 const text = &amp;#39;ABC 123 ABC 123&amp;#39;; const s = text.</description></item></channel></rss>
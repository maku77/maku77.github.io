<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on 天才まくまくノート</title><link>https://maku77.github.io/git/</link><description>Recent content in Git on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 12 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git ユーザーをディレクトリごとに自動で切り替える (.gitconfig, includeIf)</title><link>https://maku77.github.io/p/hxyiu7g/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/hxyiu7g/</guid><description>何をするか？ 会社用と個人用の GitHub ユーザーを使い分けている場合、リポジトリへのコミット時に正しいユーザーでコミットログを残すように注意しなければいけません。 多くのリポジトリを扱っている人は、次のような感じで GitHub organization ごとにディレクトリを分けて管理するなどの工夫をしていると思います（リポジトリ名だけだと重複するので）。
~/gitwork/ +-- company/ ... 会社用のリポジトリ（会社用のユーザー Rei Ayanami を使いたい） | +-- repo1/ | +-- repo2/ | +-- repo3/ +-- maku77/ ... 個人用のリポジトリ（個人用のユーザー maku77 を使いたい） +-- repo4/ +-- repo5/ +-- repo6/ company は自分の会社で使っている GitHub organization 名、maku77 は自分の GitHub アカウント名だと考えてください。 ここでは、上記のようにディレクトリを階層化してリポジトリを管理しているときに、ディレクトリ単位で自動的に Git クライアントの設定を切り替える方法を示します。 具体的には、company ディレクトリ以下のリポジトリで作業しているときは、会社用の Git ユーザー名とメールアドレスを使い、maku77 ディレクトリ以下のリポジトリで作業しているときは、個人用のユーザー名とメールアドレスを使うようにします。
リポジトリごとに local 設定 (.git/config) をするのもよいのですが、扱うリポジトリが増えてくるといちいち設定するのが大変なので、親ディレクトリの company、maku77 単位でまるっと設定を入れ替えます。
参考: Git 設定のスコープ (local/global/system) を理解する 設定ファイルの自動切換え（includeIf ディレクティブ） Git クライアントの設定ファイル（~/.gitconfig など）には、もともと別の設定ファイルをインクルードする機能 (include ディレクティブ）があるのですが、Conditional includes（条件付きインクルード） の仕組みを使うと、指定した条件に一致したときのみ設定ファイルをインクルードすることができます。 この仕組みを利用して、次のような条件付きインクルードを行えば、Git のユーザー設定をディレクトリごとに自動で切り替えることができます。</description></item><item><title>Git の設定値がどのファイルで設定されているか調べる (config --show-origin)</title><link>https://maku77.github.io/p/msds6iv/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/msds6iv/</guid><description>Git 設定のスコープには、local/global/system などがあり、ある設定値がどのスコープ（設定ファイル）で行われているか混乱することがあります。
参考: Git 設定のスコープ (local/global/system) を理解する そのような場合は、git config --list --show-origin コマンドを使うと、それぞれの設定値がどのファイルで設定されいるものなのか調べることができます。
$ git config --list --show-origin ... file:/Users/maku/.gitconfig user.name=maku77 file:/Users/maku/.gitconfig user.email=xxx@gmail.com file:/Users/maku/.gitconfig core.editor=vim file:/Users/maku/.gitconfig push.default=simple file:.git/config core.repositoryformatversion=0 file:.git/config core.filemode=true file:.git/config core.bare=false file:.git/config core.logallrefupdates=true file:.git/config core.ignorecase=true file:.git/config core.precomposeunicode=true file:.git/config remote.origin.url=https://github.com/maku77/maku77.github.io.git file:.git/config remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* file:.git/config branch.master.remote=origin file:.git/config branch.master.merge=refs/heads/master この例の場合、/Users/maku/.gitconfig で始まるものが global スコープ、.git/config で始まるものが local スコープで設定されていることが分かります。 ここでは、--list オプションですべての設定値を列挙していますが、次のように個別の設定値に関して調べることもできます。
$ git config --show-origin user.name file:/Users/maku/.gitconfig user.name=maku77</description></item><item><title>Git 設定のスコープ (local/global/system) を理解する</title><link>https://maku77.github.io/p/af7q7n3/</link><pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/af7q7n3/</guid><description>Git 設定の 3 つのスコープ git config による設定のスコープは 3 種類あり、スコープが狭くなるほど参照時の優先度は高くなります。 下記はそれぞれのスコープでの設定方法を、優先度の高い順に示しています。 カッコの中のファイル名は、コマンドを実行したときの設定値の保存先です。
$ git config --local ... # 各リポジトリごとの設定 (.git/config)（優先度:高） $ git config --global ... # 現在のユーザの共通設定 (~/.gitconfig) $ git config --system ... # システム内の共通設定 (/etc/gitconfig など)（優先度:低） 例えば、global 設定で user.name が Ichiro になっていても、local 設定が Jiro になっていれば、Jiro の方が優先的に使用されます。 プロジェクト（リポジトリ）ごとに固有の設定をする場合は、local なスコープで設定を行うとよいでしょう。 この場合、プロジェクトの作業ツリーのトップにある .git/config に設定が保存されます。
例えば、次のようにして local 設定の user.name と user.email を変更することができます。
$ git config --local user.name maku77 $ git config --local user.email maku77@example.com 上記コマンドを実行した後で、&amp;lt;リポジトリ&amp;gt;/.</description></item><item><title>Git のコミット時にコメント記述に使用するエディタを設定する (core.editor)</title><link>https://maku77.github.io/p/cqjv7wv/</link><pubDate>Sat, 17 Jul 2010 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/cqjv7wv/</guid><description>git commit コマンド実行時に、-m オプションでコメントを指定しなかった場合は、コメント入力のためにエディタが起動します。 ここで起動するエディタは自由に変更できます。 操作に慣れた Vim エディタなどを指定しておけば、コミット前の編集画面で操作ミスしてしまうこともなくなるでしょう。
例: エディタを vim に設定する $ git config --global core.editor vim 上記の例では、core.editor 設定を使ってエディタの指定を行っていますが、エディタの指定方法はたくさんあり、Git は次の順番で使用するエディタを判断します。
環境変数 GIT_EDITOR Git の core.editor 設定 環境変数 VISUAL 環境変数 EDITOR vi（Debian、Ubuntu の場合は editor）</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTML/CSS on 天才まくまくノート</title><link>https://maku77.github.io/web/</link><description>Recent content in HTML/CSS on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 26 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/web/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML の画像要素 (img) を親要素の左右両端に表示する</title><link>https://maku77.github.io/p/usqqvps/</link><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/usqqvps/</guid><description>HTML のある親要素の左右両端に画像などの子要素を配置する方法を紹介します。
Flex レイアウトを使って子要素を左右に配置する方法 （別ページで開く） Flex レイアウトの配置方法として justify-content: space-between を指定すると、「子要素を均等に配置し、最初のアイテムは先頭に寄せ、最後のアイテムは末尾に寄せる」という意味になります。
HTML &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; CSS .box { display: flex; justify-content: space-between; } position: abosolute 指定で子要素を左右に配置する方法 （別ページで開く） スタイルに position: absolute 指定を行うと、親要素の原点を基準に要素を配置することができます。 この指定に加えて、left: 0 とすれば左寄せ（デフォルト）、right: 0 とすれば右寄せで子要素を配置することができます（親要素の左端、右端に配置される）。
HTML &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;img class=&amp;#34;box_left&amp;#34; src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;img class=&amp;#34;box_right&amp;#34; src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; CSS .box { /* 子要素のタイトルを aboslute 配置するために必要 */ position: relative; } .box .box_left { position: absolute; left: 0; } .box .box_right { position: absolute; right: 0; } 応用例: ウェブサイトのヘッダ部分で使えそうな例 （別ページで開く） ここでは、両端に配置した画像の間にテキストを追加しています。 テキストに関しても同じ階層に position: absolute 配置し、中央寄せで表示しています。 このような構成にすることで、横幅が狭くなった場合に、画像の上にテキストが重なる形で表示されるようになります。</description></item><item><title>HTML のリスト要素 (ul, ol, li) のマージン指定方法を理解する</title><link>https://maku77.github.io/p/sw5kgj2/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/sw5kgj2/</guid><description>HTML でリストを表示するには ul や ol 要素を使いますが、これらのマージン、インデント設定は若干わかりにくいので、ここではいろいろなパターンの表示例を確認しながら理解を深めます。
ul 要素と li 要素の padding-left 図: ul 要素と li 要素の padding プロパティの意味 この図は、ul 要素（あるいは ol 要素）の padding-left の値と、li 要素の padding-left の値がどの領域のサイズとして反映されるかを示しています。
特に気をつけなければいけないのは、ul 要素の padding-left 値は、li 要素の描画領域の左端までのサイズになるというところです。 言い換えると、リストマーカー（・など）の右端までのサイズです。 つまり、ul 要素の padding-left の値は、リストマーカーまで含んだサイズ であることを意識して設定する必要があります。 Chrome では ul 要素の padding-left の規定値は 40px になっているようです。
一方で、li 要素の padding-left の値は、リストマーカーの右端から、テキストの左端までのサイズ を表します。 こちらの値は 0 になっていても、特におかしな表示にはなりません。
ul のインデント設定は padding-left で行うのが基本 下記は、ul 要素の padding-left プロパティだけを設定した場合の表示デモです（その他の margin 設定や padding 設定は 0 です）。 入れ子になった ul 要素も、それっぽくインデントされていることがわかります。 これが、ul 要素や ol 要素に対してインデントサイズを指定するときの基本的な方法です。</description></item><item><title>CSS のふくろうセレクターで全要素の上下マージンを設定する</title><link>https://maku77.github.io/p/vqran9d/</link><pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/vqran9d/</guid><description>HTML の各要素の上下のマージンを、それぞれの要素の margin-top や margin-bottom で設定していると、ちょっとした調整が全体のレイアウトの崩れにつながります。 Owl セレクタ（ふくろうセレクタ） と呼ばれている * + * という CSS セレクタを利用すると、全要素のマージンをまとめて設定することができるので、サイト全体のレイアウトに一貫性を持たせることができます。
* + * という指定は、ユニバーサルセレクタ (*) と隣接セレクタ (+) の組み合わせから成っており、要するに、連続する 2 番目以降の要素をすべて選択するという意味になります。 * + * によって選択された要素の上マージン (margin-top) を設定してやることで、要素間のマージンをまとめて設定できます。
下記の例では、main 要素直下に配置された、すべての要素間に 1rem のマージンを設定しています（つまり、そのページのフォントサイズで１行分のマージン）。
CSS * { margin: 0; /* ブラウザ依存のマージンはリセット */ } html { font-size: 100%; /* ユーザの指定した表示サイズを尊重する */ line-height: 1.5; } main &amp;gt; * + * { margin-top: 1rem; /* サイト全体で上下マージンを統一 */ } main &amp;gt; * + h2, main &amp;gt; * + h3, main &amp;gt; * + h4, main &amp;gt; * + h5, main &amp;gt; * + h6 { margin-top: 1.</description></item><item><title>CSS の box-sizing プロパティで width の計算方法を制御する</title><link>https://maku77.github.io/p/fprd6w4/</link><pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/fprd6w4/</guid><description>CSS の width プロパティが要素のどの部分の幅を示すかは、box-sizing プロパティの設定によって変化します。 段組などのレイアウトを正しく行うには、box-sizing の考え方を理解しておく必要があります。
content-box 指定と border-box 指定 下記の図は、HTML 要素の width の値が、具体的にどの部分の幅であるかを示しています。 ここでは簡略化のために width の例を示していますが、height も同様です。
box-sizing プロパティのデフォルト値は content-box になっており、簡単に言うと、テキストの描画部分の領域のことを表しています。 デフォルトの状態で、width: 300px; というスタイル指定を行った場合、その 300px にはパディング (padding) 部分や、ボーダー (border) 部分のサイズは含まれません。 つまり、width: 300px; と指定された要素が実際に描画されるときには、それよりも大きなサイズで描画されることになります。 ボーダー領域まで含めたサイズを、width プロパティや height プロパティで指定したいときは、box-sizing プロパティの値を border-box に指定します。
CSS .sample { /* width と height にボーダー領域まで含める */ box-sizing: border-box; } 実際に試してみる 下記のデモは、box-sizing プロパティの値を content-box（デフォルト）と border-box に設定したときの表示の違いを示しています。 分かりやすくするために、ボーダー領域は青色で表示しています。 パディング領域だけに色をつけることはできないため、テキストの周りの微妙な隙間がパディング領域だと思ってください。
図: box-sizing のデモ（別ページで開く） どちらも、width は 300px としていますが、box-sizing: border-box; と指定した場合は、ボーダー領域まで width に含めて計算するようになるため、実際の表示も若干小さくなります。</description></item><item><title>Web サイトに favicon を設定する</title><link>https://maku77.github.io/p/bdox8hr/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/bdox8hr/</guid><description>favicon の基本 Web サイトの favicon は、Web ブラウザのタブのアイコンや、ブックマークのアイコンとして使用されます。 favicon 用の画像は、PNG、ICO、GIF のいずれかのフォーマットで作成します（PNG 形式が推奨）。 favicon のパスは、HTML の head 要素内で下記のように指定します。
ルートからの相対 URL で指定する場合 &amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;/favicon.ico&amp;#34; /&amp;gt; ドメインを含めた URL で指定する場合 &amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;https://example.com/favicon.ico&amp;#34; /&amp;gt; ICO ファイルは複数のサイズのアイコンを含むことができるので、どのようなサイズを含めておくべきか迷うところですが、Microsoft は下記のようなサイズで作ることを推奨しています。
16 x 16 24 x 24 32 x 32 48 x 48 64 x 64 X-Icon Editor のサイト を使用すると、Web ブラウザ上で複数サイズのアイコンを含む ICO ファイルを作成することができます。
PNG ファイルで favicon を用意する方法 ICO 形式は古いフォーマットのため、現在では PNG 形式のファイルで favicon を作成するのが一般的 です。 PNG ファイルは、ICO ファイルと異なり、複数サイズのアイコンを含むことができないので、特定のサイズに最適されたアイコンを用意する場合は、複数の PNG ファイルとして作成しておく必要があります。</description></item><item><title>CSS の position プロパティによるレイアウト方法を理解する</title><link>https://maku77.github.io/p/3dtq7o5/</link><pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/3dtq7o5/</guid><description>CSS の position プロパティには、static、fixed、relative、absolute を指定することができます。 これらの使い方を理解することで、HTML 要素の配置方法に広がりが出ます。
4 つの position 指定 position: static; 何も指定しない場合の初期値です。デフォルトの表示ルールによって要素が配置されます。あえて明示的に指定することはおそらくありません。 position: fixed; 画面上の指定した位置に固定配置します。スクロールしても表示位置の変わらないサイトヘッダーや、SNS ボタン群の表示などに利用することができます。 position: relative; 本来表示される位置から相対的に位置をずらします。補助的な使用方法として、自分自身の z-index プロパティを指定する場合や、子要素に position: absolute; を指定する場合にも使用されます。 position: absolute; 親要素の位置を基準にした絶対位置で配置します。position: absolute; を指定するには、その親要素に position: relative;（あるいは fixed、absolute）を指定しておく必要があります（親要素を移動させる必要がないときは、単純に position: relative; とだけ記述しておけば OK）。 position: fixed 図: position: fixed; の振る舞い position: fixed; を指定すると、ブラウザの表示領域内で位置を固定して表示することができます。
図: position: fixed; のデモ（別ページで開く） 具体的な表示位置は、top、bottom、left、right プロパティで指定します。 例えば、top: 0px; left: 0px; という指定を行えば、その要素はブラウザの画面上の左上に固定表示され、ユーザが画面スクロールを行ってもその要素は移動しません。 例えば、上記の表示例のように、サイトのヘッダ情報を画面上部に固定表示したり、サイドバーのメニューを固定表示したりするのに利用することができます。
position: relative 図: position: relative; の振る舞い position: relative; を指定すると、本来その要素が表示されるはずだった位置からのオフセットを指定して、表示位置をずらすことができます。
図: position: relative; のデモ（別ページで開く） 要素の表示位置をずらしたとしても、後続の要素は、その位置ずらしがなかったものとして配置される ことに注意してください。 上記の表示例を見るとよくわかると思います。</description></item><item><title>IE 8 でも HTML5 の header や footer 要素を使えるようにする</title><link>https://maku77.github.io/p/qcvotb4/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/qcvotb4/</guid><description>IE 8 では HTML5 の header 要素や footer 要素に適用したスタイルが反映されません。 この問題を解決するには、下記のコードを head セクションに追加します。
&amp;lt;!--[if lte IE 8]&amp;gt; &amp;lt;script src=&amp;#34;http://html5shiv.googlecode.com/svn/trunk/html5.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;![endif]--&amp;gt; 新しい要素に対応していないブラウザでは、それらの要素をインライン要素として表示してしまうので、下記のようにブロック要素として定義しておかないといけないのですが、上記のスクリプトはこの設定も行ってくれます。
article, aside, dialog, figcaption, figure, footer, header, hgroup, main, nav, section { display: block; }</description></item><item><title>CSS で画像の下に隙間が空くのを防ぐ (vertical-align)</title><link>https://maku77.github.io/p/bz3ga84/</link><pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/bz3ga84/</guid><description>img 要素の下にくっつけて別の要素を配置しようとしても、デフォルトではどうしても隙間が空いてしまいます。
HTML 抜粋 &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt; 図: 画像の下に隙間ができてしまう例（別ページで開く） これは、img 要素はテキストと同様にベースラインを意識した配置が行われるからです。 下記のように vertical-align プロパティを bottom に設定しておけば、隙間をなくすことができます。
CSS img { vertical-align: bottom; } 図: 画像の下の隙間をなくした例（別ページで開く） この問題が発生しない場合は、プロジェクトで使用しているリセット系の CSS に、すでに上記のような定義が含まれている可能性が高いです。</description></item><item><title>CSS のフローティングボックス (float) を利用したレイアウトを理解する</title><link>https://maku77.github.io/p/prbp2g2/</link><pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/prbp2g2/</guid><description>float プロパティにより後続要素を回りこませる CSS の float プロパティには次のような値を指定することができます。
float: none; /* デフォルト */ float: left; /* フローティングボックスを構成して左端に配置 */ float: right; /* フローティングボックスを構成して右端に配置 */ float プロパティに left を設定すると、その要素は左端に表示され、後続の要素はその反対側（この場合は右側）に回り込んで表示されるようになります。
float を指定しない場合 float: none; デフォルトでは、ブロック要素の後続の要素は別の段落に表示さます。 float: left を指定した場合 float: left; float プロパティに
left や right
を指定すると、後続の要素は、
回り込んで表示されるようになります。 フローティングボックスの形成 float プロパティに left や right を設定した場合、その要素は フローティングボックス を形成します。 後続の要素は、フローティングボックスが存在しないとして配置されるので、横幅いっぱいのサイズが確保されます。 下記の例は、後続要素に青色の背景色を付けたサンプルです。
float: left; フローティングボックスは
後続要素から見ると
あたかもそこには存在しない
かのように配置されます。 後続要素の横幅は、フローティングボックスに重なる形で画面いっぱいのサイズになっていることが分かります。 この場合でも、実際に表示されるテキストは重ならないように考慮して描画されることになっています。
フローティングボックスの回りこみの解除 (clear) フローティングボックスの後続の要素は、フローティングボックスに対して回りこむように配置されていきます。 その回りこみを解除して、新しい段落に表示したい場合は、clear プロパティを指定します。
clear: none; /* 回りこみを解除しない（デフォルト） */ clear: left; /* 左側のフローティングボックスへの回りこみを解除 */ clear: right; /* 右側のフローティングボックスへの回りこみを解除 */ clear: both; /* 全てのフローティングボックスへの回りこみを解除 */ clear を指定しない場合 float: left; 後続の 1 つ目の要素 後続の 2 つ目の要素 clear: left; を指定した場合 float: left; 後続の 1 つ目の要素 後続の 2 つ目の要素 (clear: left;) CSS の float プロパティは、この clear 指定を後続の要素に対して指定する必要があるため、レイアウトが難しくなってしまうという欠点があります。 段組を構成したい場合は、CSS3 のグリッドレイアウトやマルチカラムの仕組みを使うことで、よりシンプルにレイアウトを作成することができます。</description></item><item><title>HTML 要素を中央寄せ／右寄せで表示する</title><link>https://maku77.github.io/p/7pi429n/</link><pubDate>Wed, 01 May 2013 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/7pi429n/</guid><description>水平方向の中央寄せ 幅 (width) の指定されたブロック要素に対して、margin-left、margin-right をともに auto に設定**すると、中央寄せで表示することができます。
あいうえお CSS div.center { display: block; /* div 要素はもともとブロック要素なので省略可 */ margin-left: auto; margin-right: auto; width: 100px height: 50px; background: blue; color: white; } HTML &amp;lt;div class=&amp;#34;center&amp;#34;&amp;gt;あいうえお&amp;lt;/div&amp;gt; img 要素などのインライン要素は、display: block でブロック要素として扱うことで、同様の方法で中央寄せできます。
HTML &amp;lt;img style=&amp;#34;display: block; margin: auto;&amp;#34; src=&amp;#34;sample.png&amp;#34;&amp;gt; 右寄せ ブロック要素を右寄せで表示するには、margin-left にだけ auto を指定します。
あいうえお .right { display: block; margin-left: auto; /* ...省略... */ } 縦方向の中央寄せ ある要素の display と vertical-align を下記のように設定しておくと、その子要素が縦方向に中央寄せされます。 外側のブロック要素の高さを height プロパティで指定する必要があることに注意してください。</description></item><item><title>HTML ファイルの雛形（テンプレート）</title><link>https://maku77.github.io/p/jjk3jqs/</link><pubDate>Sun, 15 Jan 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/jjk3jqs/</guid><description>ひな形（テンプレート） 最小限のテンプレート &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;p&amp;gt;Hello HTML5!&amp;lt;/p&amp;gt; HTML5 では、html、head、body タグの記述を省略できるので、上記のような簡潔な記述でも正しい HTML 文書となります。
CSS や JavaScript コードを追記したバージョン &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; body { background-color: khaki; } &amp;lt;/style&amp;gt; &amp;lt;p&amp;gt;Hello HTML5!&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; document.write(&amp;#39;Goodbye!&amp;#39;); &amp;lt;/script&amp;gt; style タグも、script タグも、基本は属性なしで記述できます。
あまり省略しないバージョン &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; body { background-color: khaki; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello HTML5!&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; document.write(&amp;#39;Goodbye!&amp;#39;); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; HTML5 の各要素の省略について HTML5 では、簡潔な記述が行えるように、様々な省略記法が用意されています。</description></item></channel></rss>
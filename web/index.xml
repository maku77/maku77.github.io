<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTML/CSS on 天才まくまくノート</title><link>https://maku77.github.io/web/</link><description>Recent content in HTML/CSS on 天才まくまくノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 26 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://maku77.github.io/web/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML の画像要素 (img) を親要素の左右両端に表示する</title><link>https://maku77.github.io/p/usqqvps/</link><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/usqqvps/</guid><description>HTML のある親要素の左右両端に画像などの子要素を配置する方法を紹介します。
Flex レイアウトを使って子要素を左右に配置する方法 （別ページで開く） Flex レイアウトの配置方法として justify-content: space-between を指定すると、「子要素を均等に配置し、最初のアイテムは先頭に寄せ、最後のアイテムは末尾に寄せる」という意味になります。
HTML &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; CSS .box { display: flex; justify-content: space-between; } position: abosolute 指定で子要素を左右に配置する方法 （別ページで開く） スタイルに position: absolute 指定を行うと、親要素の原点を基準に要素を配置することができます。 この指定に加えて、left: 0 とすれば左寄せ（デフォルト）、right: 0 とすれば右寄せで子要素を配置することができます（親要素の左端、右端に配置される）。
HTML &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;img class=&amp;#34;box_left&amp;#34; src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;img class=&amp;#34;box_right&amp;#34; src=&amp;#34;tree.png&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; CSS .box { /* 子要素のタイトルを aboslute 配置するために必要 */ position: relative; } .box .box_left { position: absolute; left: 0; } .box .box_right { position: absolute; right: 0; } 応用例: ウェブサイトのヘッダ部分で使えそうな例 （別ページで開く） ここでは、両端に配置した画像の間にテキストを追加しています。 テキストに関しても同じ階層に position: absolute 配置し、中央寄せで表示しています。 このような構成にすることで、横幅が狭くなった場合に、画像の上にテキストが重なる形で表示されるようになります。</description></item><item><title>HTML のリスト要素 (ul, ol, li) のマージン指定方法を理解する</title><link>https://maku77.github.io/p/sw5kgj2/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/sw5kgj2/</guid><description>HTML でリストを表示するには ul や ol 要素を使いますが、これらのマージン、インデント設定は若干わかりにくいので、ここではいろいろなパターンの表示例を確認しながら理解を深めます。
ul 要素と li 要素の padding-left 図: ul 要素と li 要素の padding プロパティの意味 この図は、ul 要素（あるいは ol 要素）の padding-left の値と、li 要素の padding-left の値がどの領域のサイズとして反映されるかを示しています。
特に気をつけなければいけないのは、ul 要素の padding-left 値は、li 要素の描画領域の左端までのサイズになるというところです。 言い換えると、リストマーカー（・など）の右端までのサイズです。 つまり、ul 要素の padding-left の値は、リストマーカーまで含んだサイズ であることを意識して設定する必要があります。 Chrome では ul 要素の padding-left の規定値は 40px になっているようです。
一方で、li 要素の padding-left の値は、リストマーカーの右端から、テキストの左端までのサイズ を表します。 こちらの値は 0 になっていても、特におかしな表示にはなりません。
ul のインデント設定は padding-left で行うのが基本 下記は、ul 要素の padding-left プロパティだけを設定した場合の表示デモです（その他の margin 設定や padding 設定は 0 です）。 入れ子になった ul 要素も、それっぽくインデントされていることがわかります。 これが、ul 要素や ol 要素に対してインデントサイズを指定するときの基本的な方法です。</description></item><item><title>CSS のふくろうセレクターで全要素の上下マージンを設定する</title><link>https://maku77.github.io/p/vqran9d/</link><pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/vqran9d/</guid><description>HTML の各要素の上下のマージンを、それぞれの要素の margin-top や margin-bottom で設定していると、ちょっとした調整が全体のレイアウトの崩れにつながります。 Owl セレクタ（ふくろうセレクタ） と呼ばれている * + * という CSS セレクタを利用すると、全要素のマージンをまとめて設定することができるので、サイト全体のレイアウトに一貫性を持たせることができます。
* + * という指定は、ユニバーサルセレクタ (*) と隣接セレクタ (+) の組み合わせから成っており、要するに、連続する 2 番目以降の要素をすべて選択するという意味になります。 * + * によって選択された要素の上マージン (margin-top) を設定してやることで、要素間のマージンをまとめて設定できます。
下記の例では、main 要素直下に配置された、すべての要素間に 1rem のマージンを設定しています（つまり、そのページのフォントサイズで１行分のマージン）。
CSS * { margin: 0; /* ブラウザ依存のマージンはリセット */ } html { font-size: 100%; /* ユーザの指定した表示サイズを尊重する */ line-height: 1.5; } main &amp;gt; * + * { margin-top: 1rem; /* サイト全体で上下マージンを統一 */ } main &amp;gt; * + h2, main &amp;gt; * + h3, main &amp;gt; * + h4, main &amp;gt; * + h5, main &amp;gt; * + h6 { margin-top: 1.</description></item><item><title>CSS の box-sizing プロパティで width の計算方法を制御する</title><link>https://maku77.github.io/p/fprd6w4/</link><pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/fprd6w4/</guid><description>CSS の width プロパティが要素のどの部分の幅を示すかは、box-sizing プロパティの設定によって変化します。 段組などのレイアウトを正しく行うには、box-sizing の考え方を理解しておく必要があります。
content-box 指定と border-box 指定 下記の図は、HTML 要素の width の値が、具体的にどの部分の幅であるかを示しています。 ここでは簡略化のために width の例を示していますが、height も同様です。
box-sizing プロパティのデフォルト値は content-box になっており、簡単に言うと、テキストの描画部分の領域のことを表しています。 デフォルトの状態で、width: 300px; というスタイル指定を行った場合、その 300px にはパディング (padding) 部分や、ボーダー (border) 部分のサイズは含まれません。 つまり、width: 300px; と指定された要素が実際に描画されるときには、それよりも大きなサイズで描画されることになります。 ボーダー領域まで含めたサイズを、width プロパティや height プロパティで指定したいときは、box-sizing プロパティの値を border-box に指定します。
CSS .sample { /* width と height にボーダー領域まで含める */ box-sizing: border-box; } 実際に試してみる 下記のデモは、box-sizing プロパティの値を content-box（デフォルト）と border-box に設定したときの表示の違いを示しています。 分かりやすくするために、ボーダー領域は青色で表示しています。 パディング領域だけに色をつけることはできないため、テキストの周りの微妙な隙間がパディング領域だと思ってください。
図: box-sizing のデモ（別ページで開く） どちらも、width は 300px としていますが、box-sizing: border-box; と指定した場合は、ボーダー領域まで width に含めて計算するようになるため、実際の表示も若干小さくなります。</description></item><item><title>CSS の rem や em を使用したサイズ指定を理解する</title><link>https://maku77.github.io/p/hbh4dwr/</link><pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/hbh4dwr/</guid><description>CSS の rem や em といった相対的なサイズ指定方法を理解すると、Web サイト全体のレイアウトの整合性を保ちやすくなります。
rem と em の違い rem や em などのフォントサイズに比例する単位は、W3C の下記のページに詳しく説明されています。
CSS Values and Units Module Level 3 - 5.1.1. Font-relative lengths: the em, ex, ch, rem units rem も em も小文字の m の幅にほぼ等しいサイズを表しますが、下記のように、どの要素のフォントサイズを基準にするかが異なります。
rem (root em) font size of the root element（ルート要素のフォントサイズ） em font size of the element（要素のフォントサイズ） これだけでは分かりにくいので、それぞれの単位の意味を詳しく見てみましょう。
rem の意味 rem はルート要素のフォントサイズを基準にした単位です。 例えば、下記のようなスタイルを考えてみます。
html { font-size: 100%; } p { font-size: 1rem; } h2 { font-size: 1.</description></item><item><title>Web サイトに favicon を設定する</title><link>https://maku77.github.io/p/bdox8hr/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/bdox8hr/</guid><description>favicon の基本 Web サイトの favicon は、Web ブラウザのタブのアイコンや、ブックマークのアイコンとして使用されます。 favicon 用の画像は、PNG、ICO、GIF のいずれかのフォーマットで作成します（PNG 形式が推奨）。 favicon のパスは、HTML の head 要素内で下記のように指定します。
ルートからの相対 URL で指定する場合 &amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;/favicon.ico&amp;#34; /&amp;gt; ドメインを含めた URL で指定する場合 &amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;https://example.com/favicon.ico&amp;#34; /&amp;gt; ICO ファイルは複数のサイズのアイコンを含むことができるので、どのようなサイズを含めておくべきか迷うところですが、Microsoft は下記のようなサイズで作ることを推奨しています。
16 x 16 24 x 24 32 x 32 48 x 48 64 x 64 X-Icon Editor のサイト を使用すると、Web ブラウザ上で複数サイズのアイコンを含む ICO ファイルを作成することができます。
PNG ファイルで favicon を用意する方法 ICO 形式は古いフォーマットのため、現在では PNG 形式のファイルで favicon を作成するのが一般的 です。 PNG ファイルは、ICO ファイルと異なり、複数サイズのアイコンを含むことができないので、特定のサイズに最適されたアイコンを用意する場合は、複数の PNG ファイルとして作成しておく必要があります。</description></item><item><title>CSS の position プロパティによるレイアウト方法を理解する</title><link>https://maku77.github.io/p/3dtq7o5/</link><pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/3dtq7o5/</guid><description>CSS の position プロパティには、static、fixed、relative、absolute を指定することができます。 これらの使い方を理解することで、HTML 要素の配置方法に広がりが出ます。
4 つの position 指定 position: static; 何も指定しない場合の初期値です。デフォルトの表示ルールによって要素が配置されます。あえて明示的に指定することはおそらくありません。 position: fixed; 画面上の指定した位置に固定配置します。スクロールしても表示位置の変わらないサイトヘッダーや、SNS ボタン群の表示などに利用することができます。 position: relative; 本来表示される位置から相対的に位置をずらします。補助的な使用方法として、自分自身の z-index プロパティを指定する場合や、子要素に position: absolute; を指定する場合にも使用されます。 position: absolute; 親要素の位置を基準にした絶対位置で配置します。position: absolute; を指定するには、その親要素に position: relative;（あるいは fixed、absolute）を指定しておく必要があります（親要素を移動させる必要がないときは、単純に position: relative; とだけ記述しておけば OK）。 position: fixed 図: position: fixed; の振る舞い position: fixed; を指定すると、ブラウザの表示領域内で位置を固定して表示することができます。
図: position: fixed; のデモ（別ページで開く） 具体的な表示位置は、top、bottom、left、right プロパティで指定します。 例えば、top: 0px; left: 0px; という指定を行えば、その要素はブラウザの画面上の左上に固定表示され、ユーザが画面スクロールを行ってもその要素は移動しません。 例えば、上記の表示例のように、サイトのヘッダ情報を画面上部に固定表示したり、サイドバーのメニューを固定表示したりするのに利用することができます。
position: relative 図: position: relative; の振る舞い position: relative; を指定すると、本来その要素が表示されるはずだった位置からのオフセットを指定して、表示位置をずらすことができます。
図: position: relative; のデモ（別ページで開く） 要素の表示位置をずらしたとしても、後続の要素は、その位置ずらしがなかったものとして配置される ことに注意してください。 上記の表示例を見るとよくわかると思います。</description></item><item><title>（旧）CSS によるフレキシブルボックスの旧式の定義方法</title><link>https://maku77.github.io/p/uu32hpo/</link><pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/uu32hpo/</guid><description> 参考: フレキシブルボックスによるレスポンシブレイアウト フレキシブルボックスの定義に、昔は display: box を使用していましたが、最新の W3C 仕様では display: flex となっています。
Chrome ~20: display:-webkit-box Chrome ~28: display:-webkit-flex Chrome 28~: display:flex Firefox ~21: display:-moz-box Firefox 22~: display:flex IE9: (not supported) IE10: display:-ms-flexbox IE11: display:flex Safari ~6.0: display:-webkit-box Safari 6.1~: display:-webkit-flex Android ~4.3: display:-webkit-box Android 4.4~: display:flex iOS(Safari) ~6.1: display:-webkit-box iOS(Safari) 7.0~: display:-webkit-flex フレキシブルボックス用の display 指定は、このように定義しておけばよさそうです。
display: flex; display: -webkit-flex; display: -webkit-box; display: -moz-box; さらに、伸縮時の割合の指定は、box-flex の代わりに flex-grow を使用します。
flex-grow: 1; -webkit-flex-grow: 1; -webkit-box-flex: 1; -moz-box-flex: 1; 参考: Can I use &amp;hellip; Support tables for HTML5, CSS3, etc 参考: 可変ボックス (&amp;ldquo;Flexbox&amp;rdquo;) レイアウトの更新 (Windows)</description></item><item><title>モバイルファーストな CSS を作成するコツ（max-width ではなく min-width を使うべし）</title><link>https://maku77.github.io/p/7vwoyht/</link><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/7vwoyht/</guid><description>モバイルファーストで Web サイトを作成するには、メディアクエリで max-width は使用せずに、min-width を使用するようにしましょう。 そうすると、デフォルトのスタイルが小さい画面用のスタイルとして適用されるため、モバイル画面でどのように表示されるかを先に考えることができます。
画面が広いときと狭い時のレイアウトを切り替える メディアクエリ (@media) を使用すると、画面幅に応じたレイアウトを行うことができます。 例えば、画面幅が広いとき（PC 画面など）のみ blockquote 要素の左マージンを大きくしたい場合は、次のような 2 通りの方法が考えられます。 ここでは、640px を切り替えの基準としています。
方法1. 広い画面をデフォルトのスタイルとする /* デフォルトのスタイル（画面が広いとき） */ blockquote { margin-left: 1em; } /* 639px 以下のスタイル（画面が狭いとき） */ @media (max-width: 639px) { blockquote { margin-left: 0; } } 方法2. 狭い画面をデフォルトのスタイルとする /* デフォルトのスタイル（画面が狭いとき） */ blockquote { margin-left: 0; } /* 640px 以上のスタイル（画面が広いとき） */ @media (min-width: 640px) { blockquote { margin-left: 1em; } } モバイルファーストで考えるのであれば、後者の min-width を使った指定方法をオススメ します。 メディアクエリ (@media) を使ったスタイル定義によって、デフォルトのスタイル定義を上書きするわけですが、デフォルトのスタイルの方を（画面が狭い）モバイルデバイス用に定義しておくことで、最初からモバイルデバイスでの表示を意識した CSS を構築していくことができます。</description></item><item><title>CSS で画面サイズによって全体のレイアウトを変更する</title><link>https://maku77.github.io/p/v5dcz6f/</link><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/v5dcz6f/</guid><description>CSS3 のメディアクエリをうまく使うと、Web ブラウザのウィンドウサイズによって、動的にレイアウトを変更することができます。
全体のレイアウト構成 ここでは、画面の幅によって、下記のように変化するレイアウトを考えてみます。　1000px 超: 固定幅の 2 段組レイアウト 1000px 以下: 可変幅の 2 段組レイアウト（リキッドレイアウト） 700px 以下: シングルカラム 今このページを PC のブラウザで見ているのであれば、下記のデモページを表示して、画面幅を変更してみてください。 画面幅に応じてレイアウトが自動的に変更されるはずです。
（別ページで表示） HTML 要素は下記のようにヘッダー、コンテンツ、サイドバー、フッターと、4 つの部分に分かれています。
&amp;lt;div id=&amp;#34;page&amp;#34;&amp;gt; &amp;lt;header id=&amp;#34;header&amp;#34;&amp;gt;Header&amp;lt;/header&amp;gt; &amp;lt;article id=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;div&amp;gt;Content&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Content&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Content&amp;lt;/div&amp;gt; &amp;lt;/article&amp;gt; &amp;lt;aside id=&amp;#34;sidebar&amp;#34;&amp;gt; &amp;lt;div&amp;gt;Sidebar&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Sidebar&amp;lt;/div&amp;gt; &amp;lt;/aside&amp;gt; &amp;lt;footer id=&amp;#34;footer&amp;#34;&amp;gt;Footer&amp;lt;/footer&amp;gt; &amp;lt;/div&amp;gt; 固定幅の 2 段組レイアウト（画面幅が広いとき） 表示幅が大きいときは、サイズ固定でページを表示します。 分かりやすいように、このレイアウトのときは、周りに青色で枠を表示しています。
#page { width: 980px; margin: 0 auto; border: blue 5px solid; } #header { background-color: lightblue; } #content { width: 680px; float: left; background-color: lightpink; } #sidebar { width: 300px; float: right; background-color: lightgreen; } #footer { clear: both; background-color: lightblue; } 可変幅の 2 段組レイアウト（画面幅が中サイズのとき） 幅が 1000px 以下になると、コンテンツ部分と、サイドバー部分を動的にサイズ変更して画面内に収まるように調整します。 このレイアウトのときは、周りに黄色で枠を表示します。</description></item><item><title>IE 8 でも HTML5 の header や footer 要素を使えるようにする</title><link>https://maku77.github.io/p/qcvotb4/</link><pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/qcvotb4/</guid><description>IE 8 では HTML5 の header 要素や footer 要素に適用したスタイルが反映されません。 この問題を解決するには、下記のコードを head セクションに追加します。
&amp;lt;!--[if lte IE 8]&amp;gt; &amp;lt;script src=&amp;#34;http://html5shiv.googlecode.com/svn/trunk/html5.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;![endif]--&amp;gt; 新しい要素に対応していないブラウザでは、それらの要素をインライン要素として表示してしまうので、下記のようにブロック要素として定義しておかないといけないのですが、上記のスクリプトはこの設定も行ってくれます。
article, aside, dialog, figcaption, figure, footer, header, hgroup, main, nav, section { display: block; }</description></item><item><title>CSS で画像と埋め込み動画のサイズを画面内に収める (max-width)</title><link>https://maku77.github.io/p/3tip9yp/</link><pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/3tip9yp/</guid><description>画像の最大幅を設定する (max-width) 画像や埋め込み動画を表示するときに、そのままのサイズで表示すると、画面サイズを縮めた場合に、画面内に収まらなくなってしまいます。 次のように max-width を指定しておくと、ブラウザのウィンドウサイズを変更したときや、モバイル端末のような小さな画面サイズで表示したときも、ちゃんと画面内に収まるように表示されます。
img, embed, iframe, object { max-width: 100%; } デモ（別ページで開く） 上記のフレームをブラウザだと思ってサイズを縮めてみてください。 表示領域のサイズ変更に連動して画像サイズも縮小されて表示されるはずです。
画面幅に応じて画像を拡大表示する 逆に、画面（ブラウザ）のサイズを広げた場合は、もともとの画像のサイズ以上の大きさでは表示されません。 画面（ブラウザ）のサイズを広げたときに、そのサイズに連動して拡大して表示したいのであれば、max-width プロパティではなく、単純に width プロパティに 100% 指定します。
img { width: 100%; /* 横幅いっぱいに画像を広げて表示 */ } 横幅いっぱいにまで広げてしまうとさすがに大きすぎるけれど、ある程度まで（例えば、横幅の 80% くらいまで）は広げたいという場合は、min-width を指定することで、「少なくともこのサイズまでは拡大して表示する」、という意味になります。 下記の例ではパーセンテージで横幅を指定していますが、px 単位でも指定することができます。
img { min-width: 80%; max-width: 100%; /* 下記は中央寄せ設定 */ display: block; margin-left: auto; margin-right: auto; } デモ（別ページで開く）</description></item><item><title>CSS のフレキシブルボックスによるレスポンシブレイアウト</title><link>https://maku77.github.io/p/tq3zi5j/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/tq3zi5j/</guid><description>CSS のフレキシブルボックスレイアウト機能を利用すると、下記の様な段組レイアウトを簡単に作成することができます。
図: 幅が広いときはサイドバーを表示 HTML &amp;lt;div id=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;sidebar1&amp;#34;&amp;gt;Sidebar 1&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;main&amp;#34;&amp;gt;Main&amp;lt;br&amp;gt;Main&amp;lt;br&amp;gt;Main&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;sidebar2&amp;#34;&amp;gt;Sidebar 2&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; CSS #container { /* フレキシブルボックスレイアウトによる段組 */ display: flex; } #sidebar1, #sidebar2 { width: 100px; background: pink; } #main { /* 画面幅が広い時はこの要素の横幅を拡張する */ flex-grow: 1; background: cyan; } 参考: （旧）フレキシブルボックスの旧式の定義方法 さらに、メディアクエリを利用して、画面幅が一定サイズ以下になったときに、このフレキシブルボックスレイアウトを解除することができます。 例えば、スマートフォンなどで表示する場合に、サイドバーを縦に並べたり、省略してもよいサイドバーを非表示にしたりできます。 下記の例では、画面幅が 400px 以下になった場合にフレキシブルボックスレイアウトを解除し、sidebar1 を横幅いっぱいで表示し、sidebar2 を非表示にしています。
図: 幅が狭いときは縦に並べる /* * レスポンシブデザイン対応。 * 幅が狭い場合は sidebar1 を横幅いっぱいに表示する。 * sidebar2 は非表示にする。 */ @media screen and (max-width: 400px) { #container { display: block; } #sidebar1 { width: auto; } #sidebar2 { display: none; } } JSFiddle で試す 上記の例では、サイドバーを表示するレイアウトをデフォルトのスタイルとして定義しましたが、モバイルファーストの考えを採用するのであれば、幅が狭い場合のレイアウト（縦に並べるレイアウト）をデフォルトのスタイルとして定義してください。</description></item><item><title>CSS で画像の下に隙間が空くのを防ぐ (vertical-align)</title><link>https://maku77.github.io/p/bz3ga84/</link><pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/bz3ga84/</guid><description>img 要素の下にくっつけて別の要素を配置しようとしても、デフォルトではどうしても隙間が空いてしまいます。
HTML 抜粋 &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;img src=&amp;#34;tree.png&amp;#34;&amp;gt; 図: 画像の下に隙間ができてしまう例（別ページで開く） これは、img 要素はテキストと同様にベースラインを意識した配置が行われるからです。 下記のように vertical-align プロパティを bottom に設定しておけば、隙間をなくすことができます。
CSS img { vertical-align: bottom; } 図: 画像の下の隙間をなくした例（別ページで開く） この問題が発生しない場合は、プロジェクトで使用しているリセット系の CSS に、すでに上記のような定義が含まれている可能性が高いです。</description></item><item><title>CSS のフローティングボックス (float) を利用したレイアウトを理解する</title><link>https://maku77.github.io/p/prbp2g2/</link><pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/prbp2g2/</guid><description>float プロパティにより後続要素を回りこませる CSS の float プロパティには次のような値を指定することができます。
float: none; /* デフォルト */ float: left; /* フローティングボックスを構成して左端に配置 */ float: right; /* フローティングボックスを構成して右端に配置 */ float プロパティに left を設定すると、その要素は左端に表示され、後続の要素はその反対側（この場合は右側）に回り込んで表示されるようになります。
float を指定しない場合 float: none; デフォルトでは、ブロック要素の後続の要素は別の段落に表示さます。 float: left を指定した場合 float: left; float プロパティに
left や right
を指定すると、後続の要素は、
回り込んで表示されるようになります。 フローティングボックスの形成 float プロパティに left や right を設定した場合、その要素は フローティングボックス を形成します。 後続の要素は、フローティングボックスが存在しないとして配置されるので、横幅いっぱいのサイズが確保されます。 下記の例は、後続要素に青色の背景色を付けたサンプルです。
float: left; フローティングボックスは
後続要素から見ると
あたかもそこには存在しない
かのように配置されます。 後続要素の横幅は、フローティングボックスに重なる形で画面いっぱいのサイズになっていることが分かります。 この場合でも、実際に表示されるテキストは重ならないように考慮して描画されることになっています。
フローティングボックスの回りこみの解除 (clear) フローティングボックスの後続の要素は、フローティングボックスに対して回りこむように配置されていきます。 その回りこみを解除して、新しい段落に表示したい場合は、clear プロパティを指定します。
clear: none; /* 回りこみを解除しない（デフォルト） */ clear: left; /* 左側のフローティングボックスへの回りこみを解除 */ clear: right; /* 右側のフローティングボックスへの回りこみを解除 */ clear: both; /* 全てのフローティングボックスへの回りこみを解除 */ clear を指定しない場合 float: left; 後続の 1 つ目の要素 後続の 2 つ目の要素 clear: left; を指定した場合 float: left; 後続の 1 つ目の要素 後続の 2 つ目の要素 (clear: left;) CSS の float プロパティは、この clear 指定を後続の要素に対して指定する必要があるため、レイアウトが難しくなってしまうという欠点があります。 段組を構成したい場合は、CSS3 のグリッドレイアウトやマルチカラムの仕組みを使うことで、よりシンプルにレイアウトを作成することができます。</description></item><item><title>Viewport とメディアクエリによるレスポンシブ Web デザインの基本</title><link>https://maku77.github.io/p/ta2kimu/</link><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/ta2kimu/</guid><description>Web サイトのレイアウトは、様々な端末、画面サイズで表示されることを想定して作成しなければいけません。 スマホやタブレット、テレビのように物理的に画面サイズが異なることもありますし、PC 上の Web ブラウザのように、ウィンドウサイズがユーザによって自由に変更されることもあります。 スマホやタブレットに備えられている Viewport の機能や、CSS3 の メディアクエリ の仕組みを利用すると、こういった様々な条件での表示に、柔軟に対応することができます。
Viewport の設定 Viewport はスマホなどの物理的に画面が小さいモバイル端末に備えられている機能で、Web ページを部分的に表示するための仮想画面を提供する機能です。 Viewport 設定は、head セクション内に配置する meta 要素で行います。
基本的な viewport 設定 &amp;lt;head&amp;gt; &amp;lt;!-- 省略 --&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; content 属性内で width=device-width と設定しておくことにより、デバイスごとに設定された仮想的な横幅 (device-width) が、Viewport の幅として設定されます。 つまり、デバイスの画面サイズに合わせてコンテンツを表示します。 デバイスの幅に合わせることで、ユーザーがズーム操作をせずにコンテンツを見ることができるようになります。 スマホの場合は、device-width は、320 〜 360px 程度に設定されていることが多いようです（参考サイト）。 この横幅は、後述するメディアクエリの width 判定にも影響します。
initial-scale はページが最初に読み込まれたときのズームレベルで、0 〜 10 の間で指定します。 initial-scale=1 は、通常のズームレベルでページを表示することを意味します。 これにより、ユーザーがページを開いたときにズームアウトまたはズームインする必要がなくなります。
メディアクエリの設定 CSS3 のメディアクエリの仕組みを使用すると、画面の表示サイズに応じて CSS を切り替えることができます。
CSS /* デフォルトのスタイル（300px 未満） */ body { background: pink; } /* 画面幅が 300px 以上の場合のスタイル */ @media screen and (min-width: 300px) { body { background: lightblue; } } /* 画面幅が 600px 以上の場合のスタイル */ @media screen and (min-width: 600px) { body { background: lightgreen; } } （別ページで開く） 上記の例では、画面の幅が 300px 以上になったとき、600px 以上になったときに背景色を変更しています。</description></item><item><title>HTML 要素を中央寄せ／右寄せで表示する</title><link>https://maku77.github.io/p/7pi429n/</link><pubDate>Wed, 01 May 2013 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/7pi429n/</guid><description>水平方向の中央寄せ 幅 (width) の指定されたブロック要素に対して、margin-left、margin-right をともに auto に設定**すると、中央寄せで表示することができます。
あいうえお CSS div.center { display: block; /* div 要素はもともとブロック要素なので省略可 */ margin-left: auto; margin-right: auto; width: 100px height: 50px; background: blue; color: white; } HTML &amp;lt;div class=&amp;#34;center&amp;#34;&amp;gt;あいうえお&amp;lt;/div&amp;gt; img 要素などのインライン要素は、display: block でブロック要素として扱うことで、同様の方法で中央寄せできます。
HTML &amp;lt;img style=&amp;#34;display: block; margin: auto;&amp;#34; src=&amp;#34;sample.png&amp;#34;&amp;gt; 右寄せ ブロック要素を右寄せで表示するには、margin-left にだけ auto を指定します。
あいうえお .right { display: block; margin-left: auto; /* ...省略... */ } 縦方向の中央寄せ ある要素の display と vertical-align を下記のように設定しておくと、その子要素が縦方向に中央寄せされます。 外側のブロック要素の高さを height プロパティで指定する必要があることに注意してください。</description></item><item><title>HTML ファイルの雛形（テンプレート）</title><link>https://maku77.github.io/p/jjk3jqs/</link><pubDate>Sun, 15 Jan 2012 00:00:00 +0000</pubDate><guid>https://maku77.github.io/p/jjk3jqs/</guid><description>ひな形（テンプレート） 最小限のテンプレート &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;p&amp;gt;Hello HTML5!&amp;lt;/p&amp;gt; HTML5 では、html、head、body タグの記述を省略できるので、上記のような簡潔な記述でも正しい HTML 文書となります。
CSS や JavaScript コードを追記したバージョン &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; body { background-color: khaki; } &amp;lt;/style&amp;gt; &amp;lt;p&amp;gt;Hello HTML5!&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; document.write(&amp;#39;Goodbye!&amp;#39;); &amp;lt;/script&amp;gt; style タグも、script タグも、基本は属性なしで記述できます。
あまり省略しないバージョン &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; body { background-color: khaki; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello HTML5!&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; document.write(&amp;#39;Goodbye!&amp;#39;); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; HTML5 の各要素の省略について HTML5 では、簡潔な記述が行えるように、様々な省略記法が用意されています。</description></item></channel></rss>